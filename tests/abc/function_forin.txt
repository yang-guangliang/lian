.function any &entry.src.main.ets.entryability.EntryAbility&.forin(any a0, any a1, any a2) <static> {
	mov v0, a0
	mov v1, a1
	mov v2, a2
	createarraywithbuffer 0x0, { 5 [ i32:1, i32:2, i32:3, i32:4, i32:5, ]}
	sta v5
	sta v3
try_begin_label_1:
	lda v3
try_end_label_1:
	jmp handler_end_label_1_0
handler_begin_label_1_0:
	sta v6
	lda v6
	throw
handler_end_label_1_0:
	getiterator 0x1
	sta v9
	lda v9
	ldobjbyname 0x3, "next"
	sta v8
	ldfalse
	sta v7
jump_label_14:
	lda v8
	callthis0 0x5, v9
	sta v10
	throw.ifnotobject v10
	lda v10
	ldobjbyname 0x7, "done"
	istrue
	jnez jump_label_12
	lda v10
	ldobjbyname 0x9, "value"
	sta v11
try_begin_label_2:
	lda v11
	sta v12
	lda v12
	sta v13
try_end_label_2:
	jmp handler_end_label_2_0
handler_begin_label_2_0:
	sta v12
	lda v7
	istrue
	jnez jump_label_13
	ldtrue
	sta v7
	ldundefined
	sta v13
	ldhole
	sta v14
try_begin_label_0:
	lda v9
	ldobjbyname 0xb, "return"
	sta v8
	sta v15
	ldundefined
	eq 0xd, v15
	jnez jump_label_13
	lda v8
	callthis0 0xe, v9
	sta v13
try_end_label_0:
	jmp handler_end_label_0_0
handler_begin_label_0_0:
	sta v14
handler_end_label_0_0:
	lda v12
	throw
	lda v13
	throw.ifnotobject v13
jump_label_13:
	lda v12
	throw
handler_end_label_2_0:
	jmp jump_label_14
jump_label_12:
	ldundefined
	returnundefined

.catchall try_begin_label_0, try_end_label_0, handler_begin_label_0_0, handler_end_label_0_0
.catchall try_begin_label_1, try_end_label_1, handler_begin_label_1_0, handler_end_label_1_0
.catchall try_begin_label_2, try_end_label_2, handler_begin_label_2_0, handler_end_label_2_0
}



//function forin() {
//  let numbers = [1, 2, 3, 4, 5];
//  for (const number of numbers) {
//      let num = number
//  }
//}