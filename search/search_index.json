{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"en/","title":"Home","text":""},{"location":"en/#why-lian","title":"Why LIAN?","text":"<p>Static analysis is a critical method for understanding software code behavior and identifying potential security risks. In recent years, with the exponential growth of codebases, the widespread adoption of multi-language heterogeneous programming, and dynamic syntax features, software behavior has become increasingly diverse and complex, posing significant challenges for static analysis. This issue is particularly pronounced when analyzing dynamic languages. Existing static analysis tools often prioritize maintaining the soundness of analysis results, leading to excessive approximations and severe precision issues \u2014 valuable security findings are often buried in a flood of irrelevant results, severely undermining the practicality of these tools. Some tools attempt to enhance static analysis by incorporating dynamic runtime results, but the limited coverage of dynamic analysis restricts this enhancement. Therefore, improving the precision of static analysis remains an urgent challenge in software security.</p>"},{"location":"en/#lian-system-intro","title":"LIAN System Intro","text":"<p>To address this challenge, we have developed LIAN Lotus System, a high-precision universal software security analysis platform. By simulating runtime states through abstract interpretation while maintaining the broad coverage of static analysis, LIAN enables precise software security analysis. Key features include:</p> <ul> <li> <p>End-to-end one-click execution: No complex environment setup or source code modification is required. Users simply specify the target directory/file, and LIAN generates analysis results such as call graphs, control flow graphs, and program state spaces, with optional visualization. It supports both complete programs and library code.</p> </li> <li> <p>Multi-language support: Compatible with static languages (e.g., Java, C) and dynamic languages (e.g., Python, JavaScript, PHP), as well as mobile bytecode (e.g., Android Dalvik) and intermediate languages (e.g., LLVM).</p> </li> <li> <p>General Intermediate Representation (GIR): LIAN's language frontends convert diverse languages into the Generic Intermediate Representation (GIR) for high-precision semantic analysis.</p> </li> <li> <p>Semantic analysis capabilities: 1) Type hierarchy analysis; 2) File dependency analysis; 3) Control flow analysis; 4) Interprocedural data flow analysis.</p> </li> <li> <p>Advanced state computation: Implements context-sensitive, flow-sensitive, field-sensitive, and path-sensitive runtime state tracking to support analyses like taint tracking and call graph construction.</p> </li> <li> <p>Result storage: Intermediate and final results are stored in a database for easy querying and utilization.</p> </li> <li> <p>Extensible underlying infrastructure: 1) Event-based plugin system for customization; 2) Memory and file management to prevent memory explosion.</p> </li> </ul>"},{"location":"en/basic_analysis/","title":"Basic Analysis","text":""},{"location":"en/basic_analysis/#1-scope-hierarchy-analysis","title":"1. Scope Hierarchy Analysis","text":"<p>Scope analysis is used to determine the effective range of symbols (including variables, functions, classes, etc.), identifying where in the code a symbol is valid. The analysis probes the entire file's scope structure, clarifies the symbols contained within each scope, and stores scope and symbol information in a tree-like structure.</p>"},{"location":"en/basic_analysis/#2-entry-points-search","title":"2. Entry Points Search","text":"<p>Entry points are determined by the <code>find_entry_point()</code> function in <code>basic_analysis.py</code>. Custom entry functions can be defined in the <code>entry_point_rule</code> field of the <code>EntryPointGenerator</code> class in the <code>entry_point.py</code> file based on actual requirements.</p>"},{"location":"en/basic_analysis/#3-control-flow-analysis","title":"3. Control Flow Analysis","text":"<p>Control flow analysis is used to construct control flow graphs (CFGs) for program methods. Its core logic involves traversing statements in the function body and invoking corresponding handler functions based on statement types to build directed graphs representing program execution paths.</p> <p>The analyzer first processes the function parameter initialization block, then analyzes the function body while connecting statement nodes. For control structures like if/while/for, it recursively analyzes their inner blocks and handles true/false branches or loop back edges. Special statements such as break/continue are collected and processed uniformly outside the loop body, while return statements are directly linked to the exit node.</p> <p>Finally, the analyzer merges duplicate edges and resolves goto-label jumps. This implementation supports various programming constructs, including conditional branches, loops, exception handling, and declaration statements. By maintaining predecessor statement lists and special statement lists, it ensures correct control flow connections, ultimately generating complete CFGs for subsequent analysis.</p>"},{"location":"en/basic_analysis/#4-instruction-level-defuse-analysis","title":"4. Instruction-Level Def/Use Analysis","text":"<p>Definition/use analysis (def/use analysis) tracks the definition and reference relationships of symbols (i.e., identifiers) in each statement of a program. At this stage, def/use analysis is flow-insensitive and performed on individual statements. The analysis proceeds statement by statement following the control flow graph (CFG). After analyzing each statement, it generates semantic information (status) for that statement and stores def/use information in two tables: <code>defined_symbolsd</code> and <code>used_symbolsd</code>. The functions of these two tables are as follows:</p> <ol> <li><code>defined_symbolsd</code> Mapping Table</li> <li>Structure: <code>(method_id, symbol_id, set[stmt_id])</code></li> <li> <p>Function: Within a given method scope, quickly locate all statements that define a specific symbol.</p> </li> <li> <p><code>used_symbolsd</code> Mapping Table</p> </li> <li>Structure: <code>(method_id, symbol_id, set[stmt_id])</code></li> <li>Function: Within a given method scope, quickly retrieve all statements that use a specific symbol.</li> </ol>"},{"location":"en/basic_analysis/#5-file-dependency-import-dependency","title":"5. File Dependency (Import Dependency)","text":"<p>For import dependency analysis, a file can use symbols defined in other files. The syntax of import statements is highly flexible\u2014the import target could be a file, a directory, or a symbol. For example:</p> <pre><code>from A import B\nfrom A import *\n</code></pre> <ul> <li>If <code>A</code> is a file, <code>B</code> and <code>*</code> represent imported symbols.</li> <li>If <code>A</code> is a directory, <code>B</code> and <code>*</code> may represent multiple files or subdirectories.</li> </ul> <p>Thus, by determining the type and content of <code>A</code>, we can resolve the meaning of <code>B</code> and <code>*</code>.</p> <p>Since the scope hierarchy analysis has already determined the scope of each symbol, we first construct an export symbol table for each file, storing symbols defined in that file that can be exported.</p> <p>Then, based on the specific import statement: - If the import target is a file, the exported symbols from the target file are added to the importing file's export symbol table (i.e., symbols are \"passed\" to the importing file). - If the import target is a directory, the directory itself is added as a symbol to the importing file's export symbol table. - If the import target is a symbol, that symbol is taken from the target file's export symbol table and added to the importing file's export symbol table.</p>"},{"location":"en/basic_analysis/#6-type-hierarchy","title":"6. Type Hierarchy","text":"<p>In this step, we analyze the program's type hierarchy, focusing on inheritance relationships between classes. The analysis consists of two phases:</p> <p>Phase 1 (Class-Level Analysis): Using the <code>analyze_type_hierarchy</code> function in the scope hierarchy, we extract method information for each class (parent classes are not processed at this stage). Meanwhile, the type graph (<code>type_graph</code>) stores inheritance relationships between classes and their parents\u2014represented as directed edges with attributes: each edge points from a child class to its parent, with attributes including the parent class name and its inheritance order.</p> <p>Phase 2 (Inheritance Relationship Analysis): We traverse the type graph (<code>type_graph</code>). When a class <code>A</code> is found to have a parent class <code>B</code>, we use topological sorting to iteratively process all successor nodes, merging the method set of parent class <code>B</code> into the method set of child class <code>A</code>.</p>"},{"location":"en/basic_analysis/#7-function-classification-based-on-callees","title":"7. Function Classification Based on Callees","text":"<p>The final step in basic analysis is function classification. In subsequent analyses, functions will be treated as the basic unit of analysis. If a function contains calls to other functions, the callee functions must be analyzed first, and their results applied to the caller function.</p> <p>Functions are classified into four categories: 1. <code>no_callees</code>: Functions that do not call any other functions. 2. <code>only_direct_callees</code>: Functions that only call statically resolvable functions. 3. <code>mixed_direct_callees</code>: Functions that call a mix of static and dynamic functions. 4. <code>only_dynamic_callees</code>: Functions that only call dynamically resolved functions (e.g., via reflection or runtime binding).</p> <p>This classification ensures that the second-phase analysis processes functions in the correct order.</p>"},{"location":"en/design/","title":"design","text":""},{"location":"en/design/#architecture","title":"Architecture","text":"<p>The LIAN system comprises three core modules, as shown in the diagram below:</p> <p></p> <ul> <li> <p>Language Frontend: Converts source code into GIR for standardized processing.</p> </li> <li> <p>Semantic Analysis Engine: Implements a layered analysis strategy, including:</p> </li> <li> <p>Basic analysis</p> </li> <li> <p>Function summary-based analysis</p> </li> <li> <p>Global analysis     Generates multi-level semantic results (control flow, data flow, state flow).</p> </li> <li> <p>Infrastructure: Provides memory/file management (previons memory exhaustion) and a plugin system for extensibility.</p> </li> </ul>"},{"location":"en/examples/","title":"Simple Example","text":"<pre><code># example.py\ndef callee(a):\n    b = a[\"x\"]\n    #vulnerable_function\n    b[\"func\"] = lambda x : print(\"vulnerable\")\n\no = {\n    \"x\" : {}\n}\n\ndef caller():\n    p = o[\"x\"]\n    # benign_function\n    p[\"func\"] = lambda x : print(\"benign\")\n    callee(o)\n    target = p[\"func\"]\n    target()\n\ncaller()\n</code></pre>"},{"location":"en/examples/#run-with-lian","title":"Run With LIAN","text":""},{"location":"en/examples/#1scriptstestsh-examplepy-only-for-test","title":"<pre><code>scripts/test.sh &lt;example.py&gt; # only for test\n</code></pre>","text":""},{"location":"en/examples/#screenshot-of-execution","title":"Screenshot of Execution","text":""},{"location":"en/examples/#gir-results","title":"GIR Results","text":""},{"location":"en/examples/#callee-function-definition","title":"callee Function Definition","text":""},{"location":"en/examples/#caller-function-definition","title":"caller Function Definition","text":""},{"location":"en/examples/#unit_init-function-definition","title":"%unit_init Function Definition","text":""},{"location":"en/examples/#_1","title":"Examples","text":""},{"location":"en/examples/#interpretation-of-results","title":"Interpretation of Results","text":"<p>From the GIR table (gir.bundle0), it can be seen that the call target() statement corresponds to the 55th GIR_stmt.  After running LIAN, the state space of the program (s2space_p3.bundle0) is generated. In this state space, for the 55th GIR_stmt, the state index in the target variable is 61.  By searching the state space (s2space_p3.bundle0) for the state with index 61, we find that its data_type is a method declaration, and its value of 27 represents the GIR_stmt_id of this method declaration.  Checking the GIR, the 27th GIR_stmt corresponds to the malicious method %mm1, indicating that this state was successfully computed. </p>"},{"location":"en/gir/","title":"General IR - GIR","text":"<p>This page describes our self-developed universal intermediate language. Compared to previous languages, GIR focuses more on concisely expressing logical relationships between variable symbols, while semantics like type inference, control flow, etc., are delegated to a subsequent \"all-in-one\" semantic analysis engine.</p> GIR Attributes Description program namebody namespace_decl namebody namespace name {body} comment_stmt data package_stmt name Represents a package declaration statement, formatted as <code>package name</code> import_stmt attrsnamealias Represents an import statement, formatted as <code>import module_path</code> or <code>import module_path as alias</code> Note\uff1a<code>module_path</code> is a directory or file path from_import_stmt attrssourcenamealias <code>attrs</code> notes\uff1a - <code>unit</code> : <code>name</code> must be a filename, not a folder- <code>init</code>\uff1atarget file must be initialized during import export_stmt attrsnamealias Represents an export command: <code>export &lt;name&gt; as &lt;alias&gt;</code><code>attrs</code> identifies if it is <code>export default</code> (JS-only) from_export_stmt attrsmodule_pathnamealias require_stmt targetname Represents a require statement: <code>target = require(name)</code>(PHP-only) class_decl attrsnamesupersstatic_initinitfieldsmethodsnested Represents a class declaration:- <code>attrs</code>: properties like <code>public</code>, <code>static</code>, <code>private</code>- <code>name</code>: class name- <code>supers</code>: list of parent classes- <code>fields</code>: member variables (each as <code>variable_decl</code>)- <code>methods</code>: member functions (each as <code>method_decl</code>)- <code>nested</code>: list of other nested declaration- <code>init</code>/<code>static_init</code>: initialization blocks, <code>init</code> for initialization of normal fields and <code>static_init</code> for initialization of the static fields Example:<code>public class Name extends A implements B { int i = 1; }</code>is represented as:<code>{\"class_decl\": {\"attrs\": [\"public\"], \"name\": \"Name\", \"supers\": [\"A\", \"B\"], \"fields\": [{\"variable_decl\": {\"data_type\": \"int\", \"name\": \"i\"}}], \"init\": [this.i = 1]}}</code> record_decl attrsnamesuperstype_parametersstatic_initinitfieldsmethodsnested <code>type_parameter</code> is a list of all typed parameters, other is same as <code>class_decl</code> interface_decl attrsnamesuperstype_parametersstatic_initinitfieldsmethodsnested Same as <code>record_decl</code> enum_decl attrsnamesupersstatic_initinitfieldsmethodsnested Same as <code>class_decl</code> annotation_type_decl attrsnamestatic_initinitfieldsmethodsnested Same as <code>class_decl</code> annotation_type_elements_decl attrsdata_typenamevalue Same as <code>class_decl</code> struct_decl attrsnamefields Same as <code>class_decl</code> parameter_decl attrsdata_typenamedefault_value Represents parameter declarations.- <code>data_type</code>: the data type of parameter- <code>name</code>: name of the parameter- <code>default_value</code>: the default value Example for <code>int f(int a, int b = 4)</code>: parameters are <code>[{\"parameter_decl\": {\"data_type\": \"int\", \"name\": \"a\"}}, {...}]</code> variable_decl attrsdata_typename Represents local/field declarations.Example: <code>signed int i = 10</code> is split into:<code>[{\"variable_decl\": {\"attrs\": \"signed\", \"data_type\": \"int\", \"name\": \"i\"}}, {\"assign_stmt\": {\"target\": \"i\", \"operand\": 10}}]</code> method_decl attrsdata_typenameparametersbody Represents function declarations.- <code>attrs</code>: properties like <code>public</code>, <code>static</code>, <code>private</code>- <code>data_type</code>: the data type of return value- <code>name</code>: name of the return value- <code>parameters</code>: list of parameters, each of the list is <code>parameter_decl</code>- <code>body</code>: list of the statements inside the methodExample: <code>public int f(int a) {}</code> has <code>attrs: \"public\"</code>, <code>data_type: \"int\"</code>, <code>name: \"f\"</code>.Anonymous functions (e.g., Python <code>lambda x: x+1</code>) are converted to named temporary methods <code>def tmp_method(x): return x+1</code>. assign_stmt data_typetargetoperandoperatoroperand2 Assignment statement:<code>target = operand [&lt;operator&gt; operand2]</code>Unary operation if <code>operand2</code> is missing (e.g., <code>a = -b</code>) call_stmt targetnamepositional_argspacked_positional_argsnamed_argspacked_named_argsdata_typeprototype Function call logic, formatted as <code>target = name(args)</code>- <code>target</code>: return value of the method, always a temporary variable- <code>name</code>: name of the called method- <code>positional_args</code>: list of positional parameters- <code>packed_positional_args</code>: Unwrapped positional parameters, and <code>positional_args</code> are mutually exclusive.- <code>named_args</code>: list of keyword parameters- <code>packed_named_args</code>: unwrapped keyword parameters, and <code>named_args</code> are mutually exclusive.- <code>data_type</code>: data type of the return value- <code>prototype</code>: prototype of the called function, will be used in <code>llvm</code> and <code>dalvik</code>Example for <code>e = o.f(a, b, c + d)</code>:1. <code>%v1 = o.f</code>2. <code>%v2 = c + d</code>3. <code>%v3 = %v1(a, b, %v2)</code> // positional_args:[a, b, %v2]4. <code>e = %v3</code> Example for <code>f(a,b,c, d=3)</code>: <code>call_stmt, name:f, positional_args:[a,b,c], named_args:{d:3}</code>Example for <code>f(a, b, c, *l, d, a = b, c = d)</code>: 1. <code>%v0 = [a, b, c]</code>2. <code>%v1 = %v0.update(l)</code>3. <code>%v2 = %v1.append(d)</code><code>call_stmt, name:f, packed_positional_args:%v2, named_args:{a:b, c:d}</code>Handles unpacking (e.g., <code>*l</code> \u2192 <code>packed_positional_args</code>). echo_stmt name PHP <code>echo</code> statement. exit_stmt name PHP <code>exit</code> statement. return_stmt name Returns a variable: <code>return name</code> if_stmt conditionthen_bodyelse_body Example:<code>if (a + b &gt; c) {}</code> \u2192<code>%v1 = a + b</code><code>%v2 = %v1 &gt; c</code><code>if (%v2) {...}</code> dowhile_stmt conditionbody Similar to <code>if_stmt</code> while_stmt conditionbodyelse_body Similar to <code>if_stmt</code> for_stmt init_bodyconditioncondition_prebodyupdate_bodybody Traditional <code>for</code> loop, formatted as <code>for (init_body; condition_prebody; condition; update_body) {}</code> - <code>init_body</code>: list of statements, the initial block- <code>condition_prebody</code>: list of statements, used for pre-statements of judging condition- <code>condition</code>: a variable- <code>update_body</code>: list of statements, need to be execute every time in the cycleExample for <code>for (int a = 1, b = 3; a +  b &lt; 10; a ++, b++) {}</code>for_stmt: [  \u2003\u2003init_body: [       \u2003\u2003\u2003\u2003variable_decl int a       \u2003\u2003\u2003\u2003a = 1       \u2003\u2003\u2003\u2003variable_decl int b       \u2003\u2003\u2003\u2003b = 3   \u2003\u2003]  \u2003\u2003condition_prebody: [          \u2003\u2003\u2003\u2003%v1 = a + b          \u2003\u2003\u2003\u2003%v2 = %v1 &lt; 10  \u2003\u2003]  \u2003\u2003condition: %v2  \u2003\u2003update_body: [        \u2003\u2003\u2003\u2003a = a + 1        \u2003\u2003\u2003\u2003b = b + 1  \u2003\u2003]  \u2003\u2003body : []] forin_stmt attrsdata_typenamereceiverbody Similar to <code>for_stmt</code>- <code>attrs</code>: attributions of Iterative variables- <code>data_type</code>: data type of Iterative variables- <code>name</code>: the Iterative variables- <code>receiver</code>: the target variable- <code>body</code>: list of statementsFormatted as <code>for attrs data_type name in receiver {}</code>Iteration statement (e.g., <code>for x in list</code>).<code>forin receiver:list name:x</code> for_value_stmt attrsdata_typenamereceiverbody Designed for JS <code>for of</code> and PHP <code>foreach</code>. switch_stmt conditionbody <code>switch(condition) {body}</code> case_stmt conditionbody <code>case</code> block inside <code>switch</code>. default_stmt body <code>default</code> block inside <code>switch</code>. break_stmt name <code>break name</code> continue_stmt name <code>continue name</code> goto_stmt name <code>goto name</code> yield_stmt name <code>yield  name</code> throw_stmt name <code>throw target</code> try_stmt bodycatch_bodyelse_bodyfinal_body <code>try {body} catch {catch_body} else {else_body} finally {final_body}</code> catch_stmt exceptionbody <code>catch</code> block label_stmt name Label declaration asm_stmt targetdata_typeattrsdataextraargs Inline assembly: <code>target = attrs data(asm content)</code> assert_stmt condition <code>assert condition</code> del_stmt receivername Python <code>del target</code> unset_stmt receivername PHP <code>unset</code> pass_stmt Empty statement (Python <code>pass</code>) global_stmt name Python <code>global target</code> nonlocal_stmt name Python <code>nonlocal target</code> type_cast_stmt targetdata_typesourceerrorcast_action Type casting: <code>target = (data_type) source</code>if there is an error, there will be an <code>error</code> type_alias_decl data_typenametype_parameters Typedef: <code>typedef int a</code> \u2192 <code>name: a</code>, <code>data_type: int</code> with_stmt attrswith_init Context manager (e.g., Python <code>async with ... as file</code>).- <code>attrs</code>: always be <code>async</code>- <code>with_init</code>: the initialization of the context manager- <code>body</code>: statements inside the <code>with_stmt</code>Example as <code>async with aiofiles.open(filepath, 'r') as file:</code> <code>content = await file.read()</code>the GIR is :{'with_stmt': {'attrs': ['async'],       'with_init': [{'field_read': {'target': '%v0',                                              'receiver_object': 'aiofiles',                                              'field': 'open'}},                              {'call_stmt': {'target': '%v1',                                            'name': '%v0',                                             'args': ['filepath', \"\"'r'\"\"]}},                              {'assign_stmt': {'target': 'file',                                               'operand': '%v1'}}],                'body': [{'field_read': {'target': '%v0',                                        'receiver_object': 'file',                                         'field': 'read'}},                         {'call_stmt': {'target': '%v1',                                        'name': '%v0',                                        'args': []}},                         {'await': {'target': '%v1'}},                         {'variable_decl': {'data_type': None,                                            'name': 'content'}},                         {'assign_stmt': {'target': 'content',                                          'operand': None}}]}} unsafe_block body Rust <code>unsafe</code> block block body Generic code block block_start stmt_idparent_stmt_id Internal marker for block start block_end stmt_idparent_stmt_id Internal marker for block end new_array targetattrsdata_type Array instantiation: <code>target = attrs data_type[]</code> new_object targetattrsdata_typeargs Class instantiation: <code>target = attrs new data_type(args)</code> new_record targetattrsdata_type Dictionary instantiation new_set targetattrsdata_type Set instantiation new_struct targetattrsdata_type Struct instantiation phi_stmt targetphi_valuesphi_labels LLVM-style phi node: <code>target = [phi_value, phi_label]</code> mem_read targetaddress Read from memory: <code>target = *address</code> mem_write addresssource Write to memory: <code>*address = source</code> array_write arrayindexsource Array write: <code>array[index] = source</code> array_read targetarrayindex Array read: <code>a0 = result[0]</code> array_insert arraysourceindex Insert into array at <code>index</code> array_append arraysource Append to array: <code>&lt;array&gt;.append(&lt;source&gt;)</code> array_extend arraysource Extend array: <code>&lt;array&gt;.extend(&lt;source&gt;)</code> record_write receiver_objectkeyvalue Map write: <code>record[key] = value</code> record_extend recordsource Map extend: <code>&lt;record&gt;.update(&lt;source&gt;)</code> field_write receiver_objectfieldsource Field write: <code>receiver_object.field = source</code> field_read targetreceiver_objectfield Field read: <code>target = receiver_object.field</code> slice_wirte arraysourcestartendstep Python slice write: <code>array[start:end:step] = source</code>- <code>start</code>: The index at which the slice begins- <code>stop</code>: The index at which the slice stops- <code>step</code>: The number of skipped elements each time slice_read targetarraystartendstep Python slice read: <code>target = array[start:end:step]</code>Example as <code>a = list[x:y:3]</code>{'slice_read': {'target': '%v1', 'array': 'list', 'start': 'x', 'end': 'y', 'step': '3'}} {'assign_stmt': {'target': 'a', 'operand': '%v1'}} addr_of targetsource Address-of: <code>target = &amp;source</code> await_stmt target <code>await</code> statement field_addr targetdata_typename Field offset calculation (e.g., <code>offsetof(struct address, name)</code>)Example as struct address {   \u2003\u2003char name[50];   \u2003\u2003char street[50];   \u2003\u2003int phone;};offsetof(struct address, name); Convert to <code>target = data_type: address, name: name</code> switch_type_stmt conditionbody Type-based <code>switch</code> statement"},{"location":"en/global_analysis/","title":"Global Analysis","text":"<p>In bottom-up analysis, since we take individual functions as analysis boundaries and do not consider the program execution order, we cannot resolve the states of variables from outside the function (such as external variables and function parameters), which we abstract as \"anything\". As mentioned above, we mark some key \"anything\" states, and the goal of the global analysis stage is to resolve the states of these key \"anything\" values.</p> <p>The global analysis stage starts from the program's entry point and re-analyzes each function along the call chain according to the program's execution order. This stage basically reuses the code from the bottom-up analysis phase, with the only difference being that we do not analyze all statements but only those containing key \"anything\" states (e.g., \"call anything()\"). The function summaries generated in the bottom-up phase can also be reused. When analyzing a method, we check if its function summary contains marked key States. If not, we directly end the analysis of the method; if yes, we only re-analyze the statements where the key States are located. If the output State of a statement changes after re-analysis, we will also analyze subsequent statements affected by this change.</p> <p>During the global analysis stage, we maintain a call stack that pushes functions onto the stack in the order of program execution calls. When analyzing a key \"anything\" state, we search layer by layer up the call stack until we can associate the \"anything\" with a specific State. </p>"},{"location":"en/lang_parser/","title":"Language Parsers","text":""},{"location":"en/lang_parser/#language-frontend","title":"Language Frontend","text":"<p>The language parsing frontend converts source code into a unified intermediate representation (IR), enabling language-agnostic semantic analysis through subsequent IR-based processing. However, existing IRs like LLVM IR and Graal Truffle suffer from complexity, and many tools require frontends to handle additional tasks such as type analysis, control flow analysis, and SSA conversion. This significantly increases frontend development complexity and raises the cost of source code transformation.</p> <p>To address this challenge, we implemented a lightweight language frontend that offloads all semantics-related logic to the semantic analysis engine. The frontend focuses solely on faithfully translating source code into our intermediate language, GIR (General IR). Designed to be type-system-agnostic, GIR strips away redundant type-related details and emphasizes code behavior modeling and variable logic relationships, enabling higher-level program behavior analysis.</p> <p>Currently, GIR contains only 78 core instructions. For details, refer to the GIR Documentation. These instructions follow intuitive semantic naming conventions, such as: - <code>class_decl</code> (class declaration) - <code>call_stmt</code> (function call) - <code>assign_stmt</code> (assignment statement)  </p>"},{"location":"en/lang_parser/#implementation-workflow","title":"Implementation Workflow","text":"<ol> <li>AST Generation: Use Tree-sitter to parse source code into an Abstract Syntax Tree (AST).  </li> <li>GIR Conversion: The language-specific parser (<code>lang_parser.py</code>) transforms the AST into GIR using a top-down recursive approach.</li> </ol>"},{"location":"en/setup/","title":"Setup","text":""},{"location":"en/setup/#install-run","title":"Install &amp; Run","text":"<ul> <li> <p>Environment required\uff1aLinux  +  Python3\uff1b</p> </li> <li> <p>Download LIAN repository\uff1a</p> </li> </ul> <pre><code>git clone https://gitee.com/fdu-ssr/lian.git\n</code></pre> <ul> <li>Install the requirements of python\uff1a</li> </ul> <pre><code>cd lian                  \npip install -r requirements.txt     \n</code></pre> <ul> <li>Basic use\uff1a</li> </ul> <pre><code>./scripts/lian.sh -l &lt;language&gt; &lt;filepath&gt;\n</code></pre>"},{"location":"en/setup/#command-line-parameter-configuration","title":"Command-Line Parameter Configuration","text":"<p>LIAN's command-line options include</p> Parameter Synonym Description Example -d --debug Enable the DEBUG mode .\\lian.sh -d  -p --print_stmts Print statements .\\lian.sh -p  -l --lang programming lang .\\lian.sh -l python  -w --workspace the workspace directory (default:lian_workspace) .\\lian.sh  -w .\\output -f --force Enable the FORCE mode for rewritting the workspace directory .\\lian.sh  -f"},{"location":"en/setup/#result-visualization","title":"Result Visualization","text":"<p>The following command will scan the default workspace and show results in a webpage. Please note that the visualization for large codebase will be slow. </p> <pre><code>./scripts/dfview.sh \n</code></pre>"},{"location":"en/summary_generation/","title":"Function Summary Analysis-Based Approach","text":"<p>Traditional static analysis work cannot meet the precision requirements of software security analysis. To achieve high-precision semantic analysis, we divide program execution into two layers based on abstract interpretation: 1) the Symbol layer, which includes identifiers such as variables; 2) the runtime state layer (State), which abstractly models the possible contents of Symbols during real execution as a so-called \"State\" and associates Symbols with their corresponding States. During semantic analysis, we simulate the dynamic execution process of the program, tracking and calculating changes in States to achieve high-precision state analysis.  </p> <p>The bottom-up analysis can be roughly divided into three parts:  </p>"},{"location":"en/summary_generation/#1-gir-instruction-analysis","title":"1. GIR Instruction Analysis","text":"<p>In GIR instruction analysis, we process GIR instructions in the current method one by one in control flow order for state-level semantic analysis. For a GIR instruction, its operation field reflects the operation type it belongs to, and based on this field, the GIR instruction is dispatched to the corresponding type-specific processing function. For example, if the operation is \"assign_stmt\", it is dispatched to the assign_stmt_state function. In the processing function, we calculate and propagate States according to different instruction types.  </p>"},{"location":"en/summary_generation/#2-intraprocedural-analysis","title":"2. Intraprocedural Analysis","text":"<p>In intraprocedural analysis, we perform GIR instruction analysis on each statement of a function. To avoid the state explosion problem when analyzing large programs and reduce repeated analysis of the same function, we take a single function as an analysis unit. After analyzing a function, we generate a state-level function summary for it, which does not change once generated. The function summary stores the final states of the function's key variables, which is a {Symbol-&gt;States} mapping. Key variables include: function parameters, external variables, the this variable, and the return variable. The function summary records the final changes to key variables starting from their initial states through the function's state calculations (e.g., adding a field to a parameter).  </p>"},{"location":"en/summary_generation/#3-interprocedural-analysis","title":"3. Interprocedural Analysis","text":"<p>Interprocedural analysis builds on intraprocedural analysis. When encountering a call_stmt like caller call callee, we first check if the callee has been analyzed. If it has, we only need to apply the callee's function summary to the corresponding states in the caller to fully retain the state semantics generated by this call; if not, we immediately interrupt the analysis of the current function and analyze the callee first. After all callees depended on by the caller are analyzed and their function summaries are generated, we resume the interrupted analysis of the caller. This approach avoids state explosion and reduces repeated analysis.  </p> <p>When applying function summaries, we first associate the caller and callee at the Symbol level (e.g., association between formal and actual parameters, external variables). Then, for each pair of associated Symbols, we retrieve the corresponding States from the caller and States' from the callee's function summary, applying States' to States to maximally ensure that the state semantics from the callee are mapped into the caller.  </p> <p>It should be noted that in the bottom-up analysis process, a single function serves as the analysis boundary, and we do not consider the specific states of external variables and function parameters passed into the function. At this stage, we abstract these external states as \"anything\", meaning they can take any value. If during analysis we find that these \"anything\" states flow into sensitive operations, such as call anything(), we will mark them as key points and record them in the function summary. In subsequent global analysis, we will resolve the specific states of these key \"anything\" values from a global perspective.</p>"},{"location":"en/underlying/","title":"Underlying Layer","text":"<p>The underlying layer provides supports for other modules, including managing memory and storage, event-based plugin system, modeling external APIs.</p>"},{"location":"en/underlying/#memory-and-file-system-loader","title":"Memory and File System (Loader)","text":"<p>To enhance the management of memory and files, particularly to mitigate memory insufficiency issues, we implemented a two-tier memory management system based on the LRU (Least Recently Used) algorithm, comprising the item layer and the bundle layer. Additionally, the bundle layer facilitates interaction with local hard disk storage, thereby enabling file management.</p>"},{"location":"en/underlying/#plugin-system-event_manager","title":"Plugin System (event_manager)","text":"<p>The unique characteristics of different programming languages require match-specific analysis and handling\u2014for instance, JavaScript's prototype chain. To ensure the extensibility of the analysis tool, this system incorporates a plugin mechanism. When developers need to add a new plugin, they must first register it in <code>app_register.py</code> and <code>event_manager.py</code>, prepare the plugin's processing logic, and then trigger the plugin at the appropriate location via <code>EventManager.notify()</code>. Once triggered, the plugin returns its output along with its processing status.</p> <p>Taking a JavaScript prototype chain handler plugin as an example, after registering the plugin and preparing its processing logic, developers trigger it at the appropriate location:</p> <pre><code>...\nevent = EventData(\n            # The language to which this plugin applies\n            self.lang,\n            # The phase in which the plugin is invoked\n            EventKind.P2STATE_NEW_OBJECT_BEFORE,\n            {\n            # Input data for the plugin\n                \"stmt_id\": stmt_id,\n                ...\n            }\n        )\n# Trigger the plugin and retrieve its output and processing status\napp_return = self.event_manager.notify(event)\n# Determine subsequent analysis based on the plugin's processing status\nif event_return.is_event_unprocessed(app_return):\n    ...\n</code></pre>"},{"location":"misc/code_style/","title":"Code style","text":""},{"location":"misc/code_style/#avoid-using-fancy-style-coding","title":"Avoid using fancy-style coding.","text":"<p>Example1: <pre><code>results = [pool.apply_async(task, (file_unit,)) for file_unit in file_units]\n</code></pre></p> <p>It is hard to read, modify and maintain. Please consider a plain format: <pre><code>results = []\nfor file_unit in file_units:\n   new_thread = pool.apply_async(task, (file_unit,))\n   results.append(new_thread)\n</code></pre></p> <p>Example2: <pre><code>distance = sum(1 for i in range(length) if i &gt;= len(components1) or i &gt;= len(components2) or components1[i] != components2[i])\n</code></pre></p> <p>Using the following code instead. <pre><code>distance = 0\nfor i in range(length):\n    if i &gt;= len(components1) or i &gt;= len(components2) or components1[i] != components2[i]:\n        distance += 1\n</code></pre></p>"},{"location":"misc/code_style/#no-tab","title":"No Tab.","text":"<p>Only space is allowed.</p>"},{"location":"misc/code_style/#avoid-tuple","title":"Avoid tuple","text":"<p>Tuple is hard to read. For example</p> <pre><code>defined_symbols.add((each_state, stmt_id, stmt_id))\n</code></pre> <p>Use class instead. <pre><code>class SymbolDefNode:\n    index:int = -1\n    symbol_id:int = -1\n    stmt_id: int = -1\n\ndefined_symbols.add(\n    SymbolDefNode(index = each_state, symbol_id = stmt_id, stmt_id = stmt_id)\n)\n</code></pre></p>"},{"location":"misc/code_style/#use-meaningful-variable-name-do-not-worry-about-variable-length","title":"Use meaningful variable name. Do not worry about variable length.","text":"<p><pre><code>state_copy = self.create_state_copy(array_state)\n</code></pre> VS <pre><code>new_array_state = self.create_state_copy(array_state)\n</code></pre></p> <p>The second one \"new_array_state\" is preferred.</p>"},{"location":"zh/","title":"Index","text":""},{"location":"zh/#_1","title":"\u80cc\u666f","text":"<p>\u200b       \u9759\u6001\u5206\u6790\u662f\u7406\u89e3\u8f6f\u4ef6\u4ee3\u7801\u884c\u4e3a\u548c\u5206\u6790\u8f6f\u4ef6\u6f5c\u5728\u5b89\u5168\u7684\u91cd\u8981\u65b9\u6cd5\u3002\u8fd1\u5e74\u6765\uff0c\u968f\u7740\u8f6f\u4ef6\u4ee3\u7801\u91cf\u7684\u6025\u5267\u589e\u52a0\uff0c\u591a\u8bed\u8a00\u5f02\u6784\u7f16\u7a0b\u3001\u52a8\u6001\u8bed\u6cd5\u7279\u6027\u7b49\u6280\u672f\u7684\u666e\u53ca\u548c\u5e7f\u6cdb\u5e94\u7528\uff0c\u8f6f\u4ef6\u884c\u4e3a\u5448\u73b0\u51fa\u591a\u6837\u5316\u548c\u590d\u6742\u5316\u7684\u8d8b\u52bf\uff0c\u9759\u6001\u5206\u6790\u9762\u4e34\u5de8\u5927\u6311\u6218\u3002\u5c24\u5176\u662f\u5728\u5904\u7406\u52a8\u6001\u8bed\u8a00\u65f6\uff0c\u8fd9\u4e00\u95ee\u9898\u66f4\u52a0\u51f8\u663e\u3002\u5df2\u6709\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\u901a\u5e38\u4fa7\u91cd\u4e8e\u7ef4\u62a4\u5206\u6790\u7ed3\u679c\u7684 soundness\uff0c\u5bfc\u81f4\u7ed3\u679c\u4e2d\u5b58\u5728\u5927\u91cf\u8fd1\u4f3c\u6570\u636e\uff0c\u9762\u4e34\u4e25\u91cd\u7684\u7cbe\u5ea6\u95ee\u9898\u2014\u2014\u6709\u4ef7\u503c\u7684\u5b89\u5168\u53d1\u73b0\u5e38\u5e38\u6df9\u6ca1\u5728\u5927\u91cf\u65e0\u610f\u4e49\u7684\u7ed3\u679c\u4e2d\uff0c\u4e25\u91cd\u5f71\u54cd\u4e86\u8fd9\u4e9b\u5de5\u5177\u7684\u5b9e\u7528\u6027\u3002\u4e00\u90e8\u5206\u5de5\u5177\u5c1d\u8bd5\u5f15\u5165\u52a8\u6001\u8fd0\u884c\u65f6\u7ed3\u679c\u6765\u589e\u5f3a\u9759\u6001\u5206\u6790\uff0c\u4f46\u7531\u4e8e\u52a8\u6001\u5206\u6790\u53d7\u9650\u4e8e\u8986\u76d6\u7387\uff0c\u5bfc\u81f4\u9759\u6001\u5206\u6790\u5f80\u5f80\u53ea\u80fd\u5f97\u5230\u90e8\u5206\u589e\u5f3a\u3002\u56e0\u6b64\uff0c\u63d0\u5347\u9759\u6001\u5206\u6790\u7cbe\u5ea6\u662f\u5f53\u524d\u8f6f\u4ef6\u5b89\u5168\u9886\u57df\u4e9f\u9700\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\u3002</p>"},{"location":"zh/#_2","title":"\u83b2\u82b1\u7cfb\u7edf","text":"<p>\u200b       \u9488\u5bf9\u8fd9\u4e00\u5173\u952e\u95ee\u9898\uff0c\u6211\u4eec\u81ea\u4e3b\u7814\u53d1\u4e86\u9ad8\u7cbe\u5ea6\u901a\u7528\u8f6f\u4ef6\u5b89\u5168\u5206\u6790\u5e73\u53f0\u2014\u2014LIAN\u83b2\u82b1\u7cfb\u7edf\uff0c\u901a\u8fc7\u62bd\u8c61\u89e3\u91ca\u6a21\u62df\u8ba1\u7b97\u8fd0\u884c\u65f6\u72b6\u6001\uff0c\u5e76\u517c\u987e\u9759\u6001\u5206\u6790\u7684\u9ad8\u8986\u76d6\u7387\uff0c\u5b9e\u73b0\u5bf9\u8f6f\u4ef6\u5b89\u5168\u5206\u6790\u3002LIAN\u62e5\u6709\u8bf8\u591a\u5f3a\u5927\u7279\u6027\uff1a</p> <ul> <li>\u7aef\u5230\u7aef\u4e00\u952e\u8fd0\u884c\u3002\u65e0\u9700\u590d\u6742\u7684\u73af\u5883\u914d\u7f6e\u548c\u4fee\u6539\u6e90\u7801\uff0c\u53ea\u9700\u6307\u5b9a\u8981\u5206\u6790\u7684\u76ee\u5f55\u6216\u6587\u4ef6\uff0cLIAN\u5c31\u80fd\u5206\u6790\u63d0\u4f9b\u8c03\u7528\u56fe\u3001\u63a7\u5236\u6d41\u56fe\u548c\u7a0b\u5e8f\u7684\u72b6\u6001\u7a7a\u95f4\u7b49\u5206\u6790\u7ed3\u679c\uff0c\u5e76\u80fd\u63d0\u4f9b\u4e00\u5b9a\u53ef\u89c6\u5316\u5c55\u793a\uff1b\u540c\u65f6\uff0c\u8f93\u5165\u65e2\u53ef\u4ee5\u662f\u5b8c\u6574\u7a0b\u5e8f\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u662f\u5e93\u6587\u4ef6\u4ee3\u7801\uff1b</li> <li>\u65b9\u4fbf\u3001\u5feb\u901f\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0d\u4ec5\u6db5\u76d6Java\u3001C\u7b49\u9759\u6001\u8bed\u8a00\uff0c\u540c\u65f6\u80fd\u591f\u652f\u6301Python\u3001JavaScript\u3001PHP\u7b49\u52a8\u6001\u8bed\u8a00\uff1b\u6b64\u5916\uff0c\u8fd8\u517c\u5bb9\u79fb\u52a8\u5b57\u8282\u7801\u683c\u5f0f(\u5982\u5b89\u5353Dalvik)\u548c\u4e2d\u95f4\u8bed\u8a00(\u5982llvm)\uff1b</li> <li>\u8bbe\u8ba1\u65b0\u578b\u7edf\u4e00\u4e2d\u95f4\u8bed\u8a00GIR\uff0cLIAN\u7684\u8bed\u8a00\u524d\u7aef\u80fd\u591f\u5c06\u591a\u79cd\u8bed\u8a00\u8f6c\u6362\u4e3aGIR\u8fdb\u884c\u9ad8\u7cbe\u5ea6\u8bed\u4e49\u5206\u6790\uff1b</li> <li>\u5728GIR\u57fa\u7840\u4e0a\uff0c\u5b9e\u73b0\u4e86\u8bed\u4e49\u5206\u6790\uff0c\u5305\u62ec\u7c7b\u578b\u5c42\u7ea7\u5206\u6790\u3001\u6587\u4ef6\u4f9d\u8d56\u5206\u6790\u3001\u63a7\u5236\u6d41\u3001\u8de8\u51fd\u6570\u6570\u636e\u6d41\u5206\u6790\uff1b</li> <li>\u540c\u65f6\uff0c\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u654f\u611f\u3001\u6d41\u654f\u611f\u3001\u57df\u654f\u611f\u3001\u5206\u652f\u654f\u611f\u7684\u7a0b\u5e8f\u8fd0\u884c\u65f6\u72b6\u6001\u8ba1\u7b97\uff0c\u80fd\u591f\u652f\u6301\u591a\u79cd\u8bed\u4e49\u5206\u6790\uff0c\u5982\u6c61\u70b9\u8ddf\u8e2a\u3001\u8c03\u7528\u56fe\u6784\u5efa\u7b49\uff1b</li> <li>\u4e2d\u95f4\u7ed3\u679c\u548c\u6700\u7ec8\u7ed3\u679c\u4fdd\u5b58\u4e8e\u5e95\u5c42\u6570\u636e\u5e93\uff0c\u6613\u4e8e\u67e5\u8be2\u548c\u5229\u7528\uff1b</li> <li>\u5e95\u5c42\u5b9e\u73b0\u4e86\u57fa\u4e8e\u4e8b\u4ef6\u7684\u63d2\u4ef6\u7cfb\u7edf\u4fbf\u4e8e\u5bf9\u7cfb\u7edf\u8fdb\u884c\u4fee\u6539\u548c\u6269\u5c55\uff0c\u5e76\u63d0\u4f9b\u5185\u5b58\u548c\u6587\u4ef6\u7ba1\u7406\u7cfb\u7edf\uff0c\u907f\u514d\u5185\u5b58\u7206\u70b8\u3002</li> </ul>"},{"location":"zh/#_3","title":"\u67b6\u6784","text":"<p>\u200b       \u4ece\u6280\u672f\u67b6\u6784\u6765\u8bf4\uff0cLIAN \u7cfb\u7edf\u7531\u4e09\u5927\u6838\u5fc3\u6a21\u5757\u6784\u6210\uff0c\u5982\u4e0b\u56fe\uff1a  - \u8bed\u8a00\u524d\u7aef\uff1a\u5c06\u8f93\u5165\u4ee3\u7801\u5185\u5bb9\u8f6c\u6362\u4e3a\u4e2d\u95f4\u8868\u793a GIR\uff0c\u5b9e\u73b0\u5bf9\u8f93\u5165\u7684\u6807\u51c6\u5316\u5904\u7406\uff1b - \u8bed\u4e49\u5206\u6790\u5f15\u64ce\uff1a\u91c7\u7528\u5206\u5c42\u9012\u8fdb\u7684\u5206\u6790\u7b56\u7565\uff0c\u4f9d\u6b21\u8fdb\u884c\u57fa\u7840\u5206\u6790\u3001\u57fa\u4e8e\u51fd\u6570\u6458\u8981\u5206\u6790\u3001\u5168\u5c40\u5206\u6790\uff0c\u6700\u7ec8\u751f\u6210\u5305\u542b\u7a0b\u5e8f\u63a7\u5236\u6d41\u3001\u6570\u636e\u6d41\u3001\u72b6\u6001\u6d41\u7b49\u591a\u5c42\u6b21\u8bed\u4e49\u5206\u6790\u7ed3\u679c\uff1b - \u5e95\u5c42\u57fa\u7840\u8bbe\u65bd\uff1a\u5305\u62ec\u7ba1\u7406\u5185\u5b58\u548c\u6587\u4ef6\u7cfb\u7edf\uff08\u9632\u6b62\u5185\u5b58\u4e0d\u8db3\uff09\u3001\u63d2\u4ef6\u7cfb\u7edf\uff08\u6613\u4e8e\u6269\u5c55\uff09\u3002</p>"},{"location":"zh/basic_analysis/","title":"\u57fa\u7840\u5206\u6790","text":""},{"location":"zh/basic_analysis/#1scope-hierarchy","title":"1.\u4f5c\u7528\u57df\u5c42\u6b21\uff08scope hierarchy\uff09\u5206\u6790","text":"<p>\u2003\u4f5c\u7528\u57df\u5206\u6790\u7528\u4e8e\u786e\u5b9a\u7b26\u53f7(symbol\uff0c\u5305\u62ec\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u7b49\u7b49)\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u7b26\u53f7\u5728\u54ea\u4e00\u90e8\u5206\u4ee3\u7801\u4e2d\u751f\u6548\u3002lian\u4f1a\u5bf9\u6574\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\u57df\u8fdb\u884c\u63a2\u6d4b\uff0c\u634b\u6e05\u6587\u4ef6\u4e2d\u5404\u4e2a\u4f5c\u7528\u57df\u4e2d\u5305\u542b\u7684\u7b26\u53f7\uff0c\u5e76\u4ee5\u6811\u5f62\u7ed3\u6784\u5b58\u50a8\u4f5c\u7528\u57df\u4e0e\u7b26\u53f7\u4fe1\u606f\u3002</p>"},{"location":"zh/basic_analysis/#2entry_points","title":"2.\u5165\u53e3\u70b9\uff08entry_points\uff09\u641c\u7d22","text":"<p>\u2003\u5165\u53e3\u70b9\u7531basic_analysis.py\u4e2d\u7684find_entry_point()\u51fd\u6570\u786e\u5b9a\u3002\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5728entry_point.py\u6587\u4ef6\u4e2dEntryPointGenerator\u7c7b\u7684entry_point_rule\u5b57\u6bb5\u81ea\u5b9a\u4e49\u5165\u53e3\u51fd\u6570\u3002</p>"},{"location":"zh/basic_analysis/#3","title":"3.\u63a7\u5236\u6d41\u5206\u6790","text":"<p>\u2003\u63a7\u5236\u6d41\u5206\u6790\u7528\u4e8e\u4e3a\u7a0b\u5e8f\u65b9\u6cd5\u6784\u5efa\u63a7\u5236\u6d41\u56fe(CFG)\u3002\u5176\u6838\u5fc3\u903b\u8f91\u662f\u904d\u5386\u51fd\u6570\u4f53\u4e2d\u7684\u8bed\u53e5\uff0c\u6839\u636e\u8bed\u53e5\u7c7b\u578b\u8c03\u7528\u76f8\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u6784\u5efa\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u8def\u5f84\u7684\u6709\u5411\u56fe\u3002\u5206\u6790\u5668\u9996\u5148\u5904\u7406\u51fd\u6570\u53c2\u6570\u521d\u59cb\u5316\u5757\uff0c\u7136\u540e\u5206\u6790\u51fd\u6570\u4f53\uff0c\u8fde\u63a5\u8bed\u53e5\u8282\u70b9\u3002\u5bf9\u4e8e\u63a7\u5236\u7ed3\u6784\u5982if/while/for\u7b49\uff0c\u4f1a\u9012\u5f52\u5206\u6790\u5176\u5185\u90e8\u5757\uff0c\u5e76\u5904\u7406true/false\u5206\u652f\u6216\u5faa\u73af\u56de\u8fb9\u3002\u7279\u6b8a\u8bed\u53e5\u5982break/continue\u4f1a\u88ab\u6536\u96c6\u5e76\u5728\u5faa\u73af\u4f53\u5916\u7edf\u4e00\u5904\u7406\uff0creturn\u8bed\u53e5\u5219\u76f4\u63a5\u8fde\u63a5\u5230\u7ed3\u675f\u8282\u70b9\u3002\u6700\u540e\uff0c\u5206\u6790\u5668\u4f1a\u5408\u5e76\u591a\u91cd\u8fb9\uff0c\u5e76\u5904\u7406goto-label\u8df3\u8f6c\u5173\u7cfb\u3002\u8be5\u5b9e\u73b0\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u7ed3\u6784\uff0c\u5305\u62ec\u6761\u4ef6\u5206\u652f\u3001\u5faa\u73af\u3001\u5f02\u5e38\u5904\u7406\u548c\u5404\u7c7b\u58f0\u660e\u8bed\u53e5\uff0c\u901a\u8fc7\u7ef4\u62a4\u524d\u9a71\u8bed\u53e5\u5217\u8868\u548c\u7279\u6b8a\u8bed\u53e5\u5217\u8868\u6765\u786e\u4fdd\u63a7\u5236\u6d41\u7684\u6b63\u786e\u8fde\u63a5\uff0c\u6700\u7ec8\u751f\u6210\u5b8c\u6574\u7684\u63a7\u5236\u6d41\u56fe\u4f9b\u540e\u7eed\u5206\u6790\u4f7f\u7528\u3002</p>"},{"location":"zh/basic_analysis/#4defuse","title":"4.\u6307\u4ee4\u7ea7def/use \u5206\u6790","text":"<p>\u2003\u8bed\u53e5\u5b9a\u4e49/\u4f7f\u7528\u5206\u6790(def/use analysis)\u7528\u4e8e\u8ffd\u8e2a\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u8bed\u53e5\u7684\u7b26\u53f7\uff08\u5373\u6807\u8bc6\u7b26\uff09\u5b9a\u4e49\u4e0e\u5f15\u7528\u5173\u7cfb\uff0c\u8fd9\u4e00\u9636\u6bb5\u7684def/use\u4ec5\u9488\u5bf9\u5355\u6761\u8bed\u53e5\u8fdb\u884c\u6d41\u4e0d\u654f\u611f\u7684\u5206\u6790\u3002\u6839\u636e\u63a7\u5236\u6d41\u56fe\u7684\u987a\u5e8f\u9010\u6761\u8bed\u53e5\u8fdb\u884cdef/use\u5206\u6790\u3002\u6bcf\u5206\u6790\u5b8c\u4e00\u6761\u8bed\u53e5\uff0c\u4ea7\u751f\u8be5\u8bed\u53e5\u7684\u8bed\u4e49\u4fe1\u606f(status)\uff0c\u5e76\u5c06def/use\u7684\u4fe1\u606f\u5b58\u50a8\u5230defined_symbolsd\u548cused_symbolsd\u4e24\u4e2a\u8868\u4e2d\u3002\u4e24\u4e2a\u8868\u4f5c\u7528\u5982\u4e0b\uff1a</p> <p>1 defined_symbolsd\u6620\u5c04\u8868\uff1a</p> <p>\u7ed3\u6784\uff1a(method_id, symbol_id, set[stmt_id])</p> <p>\u529f\u80fd\uff1a\u5728\u6307\u5b9a\u65b9\u6cd5\u4f5c\u7528\u57df\u5185\uff0c\u5feb\u901f\u5b9a\u4f4d\u5b9a\u4e49\u7279\u5b9a\u7b26\u53f7\u7684\u6240\u6709\u8bed\u53e5</p> <p>2 used_symbolsd\u6620\u5c04\u8868\uff1a</p> <p>\u7ed3\u6784\uff1a(method_id, symbol_id, set[stmt_id])</p> <p>\u529f\u80fd\uff1a\u5728\u6307\u5b9a\u65b9\u6cd5\u4f5c\u7528\u57df\u5185\uff0c\u5feb\u901f\u68c0\u7d22\u4f7f\u7528\u7279\u5b9a\u7b26\u53f7\u7684\u6240\u6709\u8bed\u53e5</p>"},{"location":"zh/basic_analysis/#5import-dependency","title":"5.\u6587\u4ef6\u4f9d\u8d56\uff08import dependency\uff09","text":"<p>\u2003\u5bf9\u4e8eimport\u4f9d\u8d56\u5206\u6790\uff0c\u4e00\u4e2a\u6587\u4ef6\u80fd\u591f\u4f7f\u7528\u5176\u4ed6\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u3002import\u8bed\u53e5\u7684\u8bed\u6cd5\u7075\u6d3b\u591a\u53d8\uff0c\u5bfc\u5165\u7684\u76ee\u6807\u53ef\u80fd\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u7b26\u53f7\u3002\u4f8b\u5982\uff1a</p> <pre><code>from A import B\n\nfrom A import *\n</code></pre> <p>\u2003\"A\"\u662f\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\"B\"\u4e0e\"\"\u4ee3\u8868\u5bfc\u5165\u7684\u7b26\u53f7\uff0c\u800c\u5f53\"A\"\u662f\u4e00\u4e2a\u76ee\u5f55\u65f6\uff0c\"B\"\u4e0e\"\"\u53ef\u80fd\u4ee3\u8868\u591a\u4e2a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u3002\u56e0\u6b64\u901a\u8fc7\u786e\u5b9a\"A\"\u7684\u7c7b\u578b\u4e0e\u5185\u5bb9\uff0c\u6765\u786e\u5b9a\"B\"\u4e0e\"*\"\u5185\u5bb9\u3002 \u2003\u56e0\u4e3a\u5728\u4f5c\u7528\u57df\u5c42\u6b21\u5206\u6790\u4e2d\u786e\u5b9a\u4e86\u6bcf\u4e2a\u7b26\u53f7\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f9d\u636e\u6b64\u7ed3\u679c\u9996\u5148\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u5efa\u7acb\u4e00\u4e2a\u5bfc\u51fa\u7b26\u53f7\u8868(export symbol table)\uff0c\u5b58\u653e\u8be5\u6587\u4ef6\u5185\u5b9a\u4e49\u7684\u53ef\u4ee5\u5bfc\u51fa\u7684\u7b26\u53f7\u3002 \u2003\u7136\u540e\u6839\u636e\u5177\u4f53\u7684import\u8bed\u53e5\u5224\u65ad\u5bfc\u5165\u7684\u76ee\u6807\u5982\u679c\u5bfc\u5165\u7684\u76ee\u6807\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u5219\u5c06\u76ee\u6807\u6587\u4ef6\u7684\u5bfc\u51fa\u7b26\u53f7\u8868\u4e2d\u7684\u5185\u5bb9\u52a0\u5165\u5230\u539f\u6587\u4ef6\u7684\u5bfc\u51fa\u7b26\u53f7\u8868\uff0c\u5373\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u201c\u4f20\u9012\u201d\u5230\u4e86\u539f\u6587\u4ef6\u3002\u5982\u679c\u5bfc\u5165\u7684\u76ee\u6807\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u5219\u5c06\u76ee\u6807\u76ee\u5f55\u4f5c\u4e3a\u4e00\u4e2a\u7b26\u53f7\u52a0\u5165\u5230\u539f\u6587\u4ef6\u7684\u5bfc\u51fa\u7b26\u53f7\u8868\u4e2d\u3002\u5982\u679c\u5bfc\u5165\u7684\u76ee\u6807\u662f\u4e00\u4e2a\u7b26\u53f7\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u5bfc\u51fa\u7b26\u53f7\u8868\u52a0\u5165\u5230\u539f\u6587\u4ef6\u7684\u5bfc\u51fa\u7b26\u53f7\u8868</p>"},{"location":"zh/basic_analysis/#6-type-hierarchy","title":"6.\u7c7b\u578b\u5c42\u7ea7 \uff08type hierarchy\uff09","text":"<p>\u2003\u5728\u6b64\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5206\u6790\u7a0b\u5e8f\u7684\u7c7b\u578b\u5c42\u6b21\u7ed3\u6784\uff0c\u91cd\u70b9\u89e3\u6790\u7c7b\u4e4b\u95f4\u7684\u7ee7\u627f\u5173\u7cfb\u3002\u8be5\u5206\u6790\u8fc7\u7a0b\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a \u2003\u7b2c\u4e00\u9636\u6bb5\uff08\u7c7b\u7ea7\u5206\u6790\uff09\uff1a \u2003\u901a\u8fc7\u4f5c\u7528\u57df\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684analyze_type_hierarchy\u51fd\u6570\uff0c\u63d0\u53d6\u6bcf\u4e2a\u7c7b\u7684\u65b9\u6cd5\u4fe1\u606f\uff08\u6682\u4e0d\u5904\u7406\u7236\u7c7b\uff09\u3002\u540c\u65f6\uff0c\u5728\u7c7b\u578b\u5173\u7cfb\u56fe(type_graph)\u4e2d\u4fdd\u5b58\u7c7b\u4e0e\u5176\u7236\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u2014\u2014\u4ee5\u5e26\u5c5e\u6027\u7684\u6709\u5411\u8fb9\u8868\u793a\uff1a\u4ece\u5f53\u524d\u7c7b\u6307\u5411\u6bcf\u4e2a\u7236\u7c7b\uff0c\u8fb9\u7684\u5c5e\u6027\u5305\u542b\u7236\u7c7b\u540d\u79f0\u53ca\u5176\u7ee7\u627f\u987a\u5e8f\u4f4d\u6b21\u3002 \u2003\u7b2c\u4e8c\u9636\u6bb5\uff08\u7ee7\u627f\u5173\u7cfb\u5206\u6790\uff09\uff1a \u2003\u904d\u5386\u7c7b\u578b\u5173\u7cfb\u56fe(type_graph)\uff0c\u5f53\u68c0\u6d4b\u5230\u7c7bA\u5b58\u5728\u7236\u7c7bB\u65f6\uff0c\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u8fed\u4ee3\u5904\u7406\u6240\u6709\u540e\u7ee7\u8282\u70b9\uff0c\u5c06\u7236\u7c7bB\u7684\u65b9\u6cd5\u96c6\u5408\u5408\u5e76\u5230\u5b50\u7c7bA\u7684\u65b9\u6cd5\u96c6\u5408\u4e2d\u3002</p>"},{"location":"zh/basic_analysis/#7callee","title":"7.\u6839\u636ecallee\u5bf9\u51fd\u6570\u8fdb\u884c\u5206\u7c7b","text":"<p>\u2003\u57fa\u7840\u5206\u6790\u7684\u6700\u540e\u4e00\u6b65\u4fbf\u662f\u5bf9\u51fd\u6570\u8fdb\u884c\u5206\u7c7b\uff0c\u5728\u540e\u7eed\u7684\u5206\u6790\u4e2d\uff0c\u5c06\u4f1a\u4ee5\u51fd\u6570\u4e3a\u57fa\u672c\u5355\u4f4d\u8fdb\u884c\u5206\u6790\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9\u5176\u4ed6\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5219\u9700\u8981\u5148\u5206\u6790\u88ab\u8c03\u7528\u51fd\u6570\uff0c\u5f97\u5230\u7ed3\u679c\uff0c\u518d\u5c06\u8be5\u7ed3\u679c\u5e94\u7528\u5230\u8c03\u7528\u8005\u51fd\u6570\u3002\u9700\u8981\u628a\u51fd\u6570\u5206\u6210no_callees\uff0conly_direct_callees\uff0cmixed_direct_callees\uff0conly_dynamic_callees\u56db\u7c7b\u3002\u4ee5\u4fbf\u540e\u7eed\u7b2c\u4e8c\u9636\u6bb5\u5206\u6790\u80fd\u591f\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u5206\u6790\u51fd\u6570\u3002</p>"},{"location":"zh/commands/","title":"\u53c2\u6570\u914d\u7f6e","text":"<p>\u672c\u9875\u9762\u8bb0\u5f55\u4e86Lian\u7684\u547d\u4ee4\u884c\u53c2\u6570\u914d\u7f6e\uff0c\u5982\u4e0b\u5206\u4e3a\u8f93\u5165\u53c2\u6570\u548c\u8f93\u51fa\u53c2\u6570</p> <p>\u8f93\u5165\u53c2\u6570\uff1a</p> \u53c2\u6570 \u540c\u4e49\u53c2\u6570 \u542b\u4e49 \u4f8b\u5b50 -d --debug \u6253\u5f00debug\u6a21\u5f0f\uff0c\u4f1a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f .\\lian.sh -d  -p --print_stmts \u6253\u5370GIR\u8bed\u53e5 .\\lian.sh -p  -l --lang \u6307\u5b9a\u5f85\u5206\u6790\u7684\u8bed\u8a00 .\\lian.sh -l python  <p>\u8f93\u51fa\u53c2\u6570\uff1a</p> \u53c2\u6570 \u540c\u4e49\u53c2\u6570 \u542b\u4e49 \u4f8b\u5b50 -w --workspace \u6307\u5b9a\u5b58\u50a8\u7ed3\u679c\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662flian_workspace .\\lian.sh  -w .\\output -f --force \u5c06\u8f93\u51fa\u7ed3\u679c\u8986\u76d6\u5230\u5de5\u4f5c\u76ee\u5f55 .\\lian.sh  -f"},{"location":"zh/examples/","title":"\u7b80\u5355\u4f8b\u5b50","text":"<pre><code># example.py\ndef callee(a):\n    b = a[\"x\"]\n    #vulnerable_function\n    b[\"func\"] = lambda x : print(\"vulnerable\")\n\no = {\n    \"x\" : {}\n}\n\ndef caller():\n    p = o[\"x\"]\n    # benign_function\n    p[\"func\"] = lambda x : print(\"benign\")\n    callee(o)\n    target = p[\"func\"]\n    target()\n\ncaller()\n</code></pre>"},{"location":"zh/examples/#lian","title":"\u4f7f\u7528LIAN\u5206\u6790","text":""},{"location":"zh/examples/#1scriptstestsh-examplepy","title":"<pre><code>scripts/test.sh &lt;example.py&gt; #\u4ec5\u9650\u6d4b\u8bd5\n</code></pre>","text":""},{"location":"zh/examples/#_2","title":"\u8fd0\u884c\u622a\u56fe","text":""},{"location":"zh/examples/#gir","title":"GIR\u7ed3\u679c","text":""},{"location":"zh/examples/#callee","title":"callee\u51fd\u6570\u5b9a\u4e49","text":""},{"location":"zh/examples/#caller","title":"caller\u51fd\u6570\u5b9a\u4e49","text":""},{"location":"zh/examples/#unit_init","title":"%unit_init\u51fd\u6570\u5b9a\u4e49","text":""},{"location":"zh/examples/#_3","title":"\u7b80\u5355\u4f8b\u5b50","text":""},{"location":"zh/examples/#_4","title":"\u7ed3\u679c\u89e3\u8bfb","text":"<p>\u4eceGIR\u8868(gir.bundle0)\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0ccall target()\u662f\u7b2c55\u6761GIR_stmt\u3002  \u8fd0\u884cLIAN\u540e\uff0c\u751f\u6210\u8be5\u7a0b\u5e8f\u7684\u72b6\u6001\u7a7a\u95f4(s2space_p3.bundle0)\u3002\u4ece\u72b6\u6001\u7a7a\u95f4\u4e2d\u80fd\u591f\u770b\u5230\u7b2c55\u6761GIR_stmt\u4e2d\uff0ctarget\u53d8\u91cf\u4e2d\u7684\u72b6\u6001index\u4e3a61\u3002  \u67e5\u9605\u72b6\u6001\u7a7a\u95f4(s2space_p3.bundle0)\u627e\u5230index\u4e3a61\u7684\u72b6\u6001\uff0c\u53ef\u4ee5\u770b\u5230\u5176data_type\u4e3a\u4e00\u4e2a\u65b9\u6cd5\u58f0\u660e\uff0c\u5219\u5176value\u503c27\u8868\u793a\u8be5\u65b9\u6cd5\u58f0\u660e\u7684GIR_stmt_id\u3002  \u67e5\u9605GIR(gir.bundle0)\uff0c\u53d1\u73b0\u7b2c27\u6761GIR_stmt\u5bf9\u5e94\u7740\u6076\u610f\u65b9\u6cd5%mm1\u3002\u8bf4\u660e\u8be5\u72b6\u6001\u6210\u529f\u88ab\u8ba1\u7b97\u51fa\u6765\u3002 </p>"},{"location":"zh/gir/","title":"Gir","text":"<p>\u672c\u9875\u9762\u63cf\u8ff0\u4e86\u6211\u4eec\u81ea\u4e3b\u7814\u53d1\u7684\u901a\u7528\u6027\u4e2d\u95f4\u8bed\u8a00\u3002\u4e0e\u4ee5\u5f80\u8bed\u8a00\u76f8\u6bd4\uff0cGIR\u66f4\u4fa7\u91cd\u4e8e\u7528\u7b80\u660e\u7684\u65b9\u5f0f\u8868\u8fbe\u53d8\u91cf\u7b26\u53f7\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u7c7b\u578b\u63a8\u65ad\u3001\u63a7\u5236\u6d41\u7b49\u7b49\u8bed\u4e49\u5219\u4ea4\u7ed9\u540e\u7eed\u201c\u591a\u5408\u4e00\u201d\u8bed\u4e49\u5206\u6790\u5f15\u64ce\u5904\u7406\u3002</p> GIR \u5c5e\u6027 \u63cf\u8ff0 program namebody namespace_decl namebody namespace name {body} comment_stmt data package_stmt name \u8868\u793apackage\u58f0\u660e\u8bed\u53e5\uff0c\u683c\u5f0f\u4e3apackage name import_stmt attrsnamealias \u8868\u793aimport\u8bed\u53e5 from_import_stmt attrssourcenamealias attrs\u8bf4\u660e\uff1a - unit : \u8868\u793aname\u5fc5\u987b\u662f\u6587\u4ef6\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\u5939\u540d\u5b57- init\uff1aimport\u65f6\uff0c\u5fc5\u987b\u5bf9\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u521d\u59cb\u5316 export_stmt attrsnamealias \u8868\u793a\u5bfc\u51fa\u547d\u4ee4\uff0c\u683c\u5f0f\u4e3aexport  as  attrs\u7528\u4e8e\u6807\u8bc6\u662f\u5426\u662fexport default(\u4ec5\u7528\u4e8ejs) from_export_stmt attrsmodule_pathnamealias require_stmt targetname \u8868\u793arequire\u8bed\u53e5\uff0c\u683c\u5f0f\u4e3atarget = require(name)\u53ea\u5728php\u4e2d\u51fa\u73b0 class_decl attrsnamesupersstatic_initinitfieldsmethodsnested \u8868\u793a\u7c7b\u58f0\u660e\u5176\u4e2dattrs\u8868\u793a\u5c5e\u6027\u5185\u5bb9\uff0c\u4f8b\u5982public\\static\\private\u7b49\u7b49name\u8868\u793a\u7c7b\u7684\u540d\u5b57supers\u8868\u793a\u7236\u7c7b\u540d\u5b57\uff0c\u662f\u4e2a\u5217\u8868type_parameters\u662f\u6240\u6709\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u662f\u4e2a\u5217\u8868fields\u662f\u6240\u6709\u7684\u6210\u5458\u53d8\u91cf\u58f0\u660e\uff0c\u6bcf\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u7528variable_decl\u8868\u793a\uff0c\u8be6\u89c1variable_decl\u7684\u8bf4\u660emethods\u662f\u6240\u6709\u7684\u6210\u5458\u51fd\u6570\uff0c\u662f\u4e2a\u5217\u8868\uff1b\u6bcf\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u7528method_decl\u8868\u793anested\u662f\u4e2a\u5217\u8868\uff0c\u8868\u793a\u4e86\u5d4c\u5957\u7684\u5176\u4ed6\u58f0\u660einit\u548cstatic_init\u662f\u7528\u4e8e\u5b58\u653e\u521d\u59cb\u5316\u5185\u5bb9\uff0cinit\u7528\u4e8e\u5b58\u653e\u4e00\u822cfield\u7684\u521d\u59cb\u5316\uff0cstatic_init\u7528\u4e8e\u5b58\u653e\u9759\u6001field\u521d\u59cb\u5316\u5185\u5bb9 \u4f8b\u5982public class name extends a implements b {           \u2003\u2003\u2003int i = 1;} \u53ef\u4ee5\u5199\u6210{\"\"class_decl\"\": {\"\"attrs\"\": [\"\"public\"\"], \"\"name\"\": name, \"\"supers\"\": [\"\"a\"\", \"\"b\"\"], \"\"fields\"\": [{\"\"variable_decl\"\": {\"\"data_type\"\": int, \"\"name\"\":i}}], \"\"init\"\": [ this.i = 1] }} record_decl attrsnamesuperstype_parametersstatic_initinitfieldsmethodsnested \u540c\u4e0a interface_decl attrsnamesuperstype_parametersstatic_initinitfieldsmethodsnested \u540c\u4e0a enum_decl attrsnamesupersstatic_initinitfieldsmethodsnested \u540c\u4e0a annotation_type_decl attrsnamestatic_initinitfieldsmethodsnested \u540c\u4e0a annotation_type_elements_decl attrsdata_typenamevalue \u540c\u4e0a struct_decl attrsnamefields \u540c\u4e0a parameter_decl attrsdata_typenamedefault_value \u7528\u4e8e\u5b58\u653e\u53c2\u6570\u58f0\u660eattrs\u4ee3\u8868\u4e86\u5c5e\u6027data_type\u4ee3\u8868\u4e86\u8be5\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578bname\u4ee3\u8868\u4e86\u53c2\u6570\u540d\u5b57default_value\u4ee3\u8868\u9ed8\u8ba4\u503c \u4f8b\u5982int f(int a, int b = 4); f\u51fd\u6570\u58f0\u660e\u4e2d\u7684\u53c2\u6570\u5217\u8868\u4e3a[{\"\"parameter_decl\"\": { \"\"data_type\"\": \"\"int\"\", \"\"name\"\": \"\"a\"\"}},{....}] variable_decl attrsdata_typename \u7528\u4e8e\u5b58\u653e\u672c\u5730\u53d8\u91cf\u58f0\u660e\u6216\u8005class\u5185\u90e8field\u58f0\u660eattrs\u4e3a\u5c5e\u6027data_type\u4ee3\u8868\u4e86\u8be5\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578bname\u4ee3\u8868\u4e86\u53d8\u91cf\u7684\u540d\u5b57 \u4f8b\u5982signed int i  = 10;\u53ef\u4ee5\u5199\u6210\u4e24\u6761\u6307\u4ee4\uff0c\u4e00\u6761\u4e3a\u53d8\u91cf\u58f0\u660e\uff0c\u4e00\u6761\u4e3a\u8d4b\u503c\u8bed\u53e5[{\"\"variable_decl\"\": {\"\"attrs\"\": \"\"signed\"\", \"\"data_type\"\": \"\"int\"\", \"\"name\"\": \"\"i\"\"}},{\"\"assign_stmt\"\": {\"\"target\"\": \"\"i\"\", \"\"operand\"\": 10}}] method_decl attrsdata_typenameparametersbody \u8be5\u6307\u4ee4\u7528\u4e8e\u8868\u793a\u51fd\u6570\u58f0\u660eattrs\u4e3a\u8be5\u51fd\u6570\u7684\u5c5e\u6027\uff0c\u4f8b\u5982public\\static\u7b49data_type\u4e3a\u8fd4\u56de\u503c\u7684\u6570\u636e\u7c7b\u578bname\u4e3a\u51fd\u6570\u540d\u79f0parameters\u662f\u53c2\u6570\u5217\u8868\uff0c\u4e3a\u5217\u8868init\u662f\u53c2\u6570\u6307\u660e\u4e86\u53c2\u6570\u521d\u59cb\u5316\u5185\u5bb9\uff0c\u4e3a\u5217\u8868body\u4e3a\u51fd\u6570\u5185\u90e8\u5177\u4f53\u6307\u4ee4\uff0c\u4e3a\u5217\u8868 \u4ee5java\u4e3a\u4f8b\uff0cpublic int f(int a ) {}attrs: publicdata_type: intname: fparameters\u5bf9\u5e94\u7684\u662f\u4e2alist\uff0c\u91cc\u9762\u6bcf\u4e00\u9879\u90fd\u662fparameter_decl: []  \u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u78b0\u5230\u533f\u540d\u51fd\u6570\uff0c\u4e5f\u9700\u8981\u8f6c\u4e3a\u6709\u540d\u51fd\u6570 \u8b6c\u5982python\u91cc\u9762lamda x: x+1\u8f6c\u4e3adef tmp_method(x):              return x + 1 assign_stmt data_typetargetoperandoperatoroperand2 \u8d4b\u503c\u8bed\u53e5 target = operand [ operand2] \u5982\u679coperand2\u7f3a\u5931\u7684\u8bdd\uff0c\u662f\u4e00\u5143\u64cd\u4f5c\uff0c\u4f8b\u5982a=b\uff0c\u6216\u8005a = -b call_stmt targetnamepositional_argspacked_positional_argsnamed_argspacked_named_argsdata_typeprototype \u7528\u4e8e\u8c03\u7528\u51fd\u6570\uff0c\u683c\u5f0f\u4e3atarget = name(args)target\u662f\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u4e00\u822c\u4e3a\u4e34\u65f6\u53d8\u91cfname\u4e3a\u88ab\u8c03\u7528\u51fd\u6570\u7684\u540d\u5b57positional_args\u662f\u4f4d\u7f6e\u53c2\u6570\u5217\u8868data_type\u4e3a\u8fd4\u56de\u503c\u7684\u6570\u636e\u7c7b\u578bprototype\u4e3a\u88ab\u8c03\u7528\u51fd\u6570\u7684\u539f\u578b\uff0cllvm\u548cdalvik\u7b49\u4e2d\u95f4\u8bed\u8a00\u4f1a\u7528\u5230\u4f8b\u5982e = o.f(a, b, c + d)\u9996\u5148\u6539\u5199%v1 = o.f%v2 = c + d%v3 = %v1(a, b, %v2) // positional_args:[a, b, %v2]e = %v3 ======================\u5173\u4e8e\u53c2\u6570\u7684\u8bf4\u660e\uff1apositional_args\u662f\u4f4d\u7f6e\u53c2\u6570\u5217\u8868packed_positional_args\u662f\u89e3\u5305\u4f4d\u7f6e\u53c2\u6570\uff1a\u5982\u679c\u5f53\u53c2\u6570\u5217\u8868\u4e2d\u7684\u53c2\u6570\u7528\u5230\u89e3\u5305\u7b26\u53f7\u65f6\uff0c\u5c06\u6240\u6709\u7684\u4f4d\u7f6e\u53c2\u6570\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b58\u653e\u5230packed_positional_args\u4e2d\uff1bpositional_args\u548cpacked_positional_args\u662f\u4e92\u65a5\u5173\u7cfb\uff0c\u53ea\u80fd\u7528\u4e00\u4e2anamed_args\u662f\u5173\u952e\u5b57\u53c2\u6570\u5217\u8868packed_named_args\u662f\u6253\u5305\u5173\u952e\u5b57\u53c2\u6570\uff1a\u5f53\u53c2\u6570\u5217\u8868\u4e2d\u7684\u53c2\u6570\u7528\u5230\u5b57\u5178\u89e3\u5305\u7b26\u53f7\u65f6\uff0c\u5c06\u6240\u6709\u7684\u5173\u952e\u5b57\u53c2\u6570\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b58\u653e\u5230packed_named_args\u4e2d\uff1bnamed_args\u548cpacked_named_args\u4e5f\u662f\u4e92\u65a5\u5173\u7cfb \u4f8b\u5982f(a,b,c, d=3)\u53ea\u9700\u8981\u63d0\u4f9bpositional_args\u548cnamed_args\u5373\u53efcall_stmt, name:f, positional_args:[a,b,c], named_args:{d:3} \u518d\u4f8b\u5982\uff0cf(a, b, c, *l, d, a = b, c = d)\u8fd9\u91cc\u9762\u5c31\u7528\u5230\u89e3\u5305\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f1a\u63d0\u4f9bpacked_positional_args\u548cnamed_args\u53d8\u6210\u5982\u4e0b\u4e2d\u95f4\u8bed\u8a00\uff1a%v0 = [a, b, c]%v1 = %v0.update(l)%v2 = %v1.append(d)call_stmt, name:f, packed_positional_args:%v2, named_args:{a:b, c:d} echo_stmt name php\u4e2d\u7684echo\u6307\u4ee4 exit_stmt name php\u4e2d\u7684exit\u6307\u4ee4 return_stmt name \u7528\u4e8e\u8fd4\u56de\u53d8\u91cf\uff0c\u683c\u5f0f\u4e3areturn name if_stmt conditionthen_bodyelse_body \u7528\u4e8e\u8868\u793aif.else\u5176\u4e2dcondition\u662f\u4e2a\u53d8\u91cf\uff0cthen_body\u548celse_body\u5206\u522b\u4e3a\u5bf9\u5e94\u7684\u6307\u4ee4\u5217\u8868 \u4f8b\u5982if (a + b &gt; c) {}%v1 = a + b%v2 = %v1 &gt; cif (%v2) ... dowhile_stmt conditionbody \u7c7b\u4f3c\u4e8eif while_stmt conditionbodyelse_body \u7c7b\u4f3c\u4e8eif for_stmt init_bodyconditioncondition_prebodyupdate_bodybody \u4f20\u7edffor\u5faa\u73af\uff0c\u683c\u5f0f\u4e3afor (init_body; condition_prebody; condition; update_body) {}init_body\u4e3a\u521d\u59cb\u5316\u5757\uff0c\u4e3a\u6307\u4ee4\u5217\u8868condition_prebody\u5b58\u5728\u7528\u4e8e\u5224\u65adcondition\u7684\u524d\u7f6e\u6307\u4ee4\uff0c\u4e3a\u6307\u4ee4\u5217\u8868condition\u4e3a\u53d8\u91cfupdate_body\u4e3a\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5217\u8868 \u4f8b\u5982for (int a = 1, b = 3; a +  b &lt; 10; a ++, b++) {}\u5176\u4e2d\u95f4\u8bed\u8a00\u903b\u8f91\u7ed3\u6784\u4e3afor_stmt: [  \u2003\u2003init_body: [       \u2003\u2003\u2003\u2003variable_decl int a       \u2003\u2003\u2003\u2003a = 1       \u2003\u2003\u2003\u2003variable_decl int b       \u2003\u2003\u2003\u2003b = 3   \u2003\u2003]  \u2003\u2003condition_prebody: [          \u2003\u2003\u2003\u2003%v1 = a + b          \u2003\u2003\u2003\u2003%v2 = %v1 &lt; 10  \u2003\u2003]  \u2003\u2003condition: %v2  \u2003\u2003update_body: [        \u2003\u2003\u2003\u2003a = a + 1        \u2003\u2003\u2003\u2003b = b + 1  \u2003\u2003]  \u2003\u2003body : []] forin_stmt attrsdata_typenamereceiverbody \u7c7b\u4f3c\u4e8e\u4f20\u7edfforattrs\u8868\u793a\u8fed\u4ee3\u53d8\u91cf\u5c5e\u6027data_type\u4e3a\u8fed\u4ee3\u53d8\u91cf\u6570\u636e\u7c7b\u578bname\u4e3a\u8fed\u4ee3\u53d8\u91cfreceiver\u4e3a\u76ee\u6807\u53d8\u91cfbody\u4e3a\u6307\u4ee4\u5217\u8868\u683c\u5f0f\u4e3a for attrs data_type name in receiver {} \u4f8b\u5982  for x in list\u53ef\u4ee5\u5199\u6210forin receiver:list name:x \u4f8b\u5982for a, b in list:    \u2003\u2003\u2003\u2003body\u53ef\u4ee5\u5199\u6210forin receiver:list name:%v0:     \u2003\u2003array_read a = %v0[0]    \u2003\u2003array_read b = %v0[1]     \u2003body for_value_stmt attrsdata_typenamereceiverbody \u7c7b\u4f3c\u4e8efor in\uff0c \u4e3a\u4e86 js \u4e2d\u7684 for of \u548c php \u4e2d\u7684 for each \u8bbe\u8ba1 switch_stmt conditionbody \u8868\u793aswitch\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3aswitch(condition) \u5176\u4e2dcondition\u4e3a\u7528\u4e8e\u5224\u65ad\u7684\u53d8\u91cf case_stmt conditionbody \u8868\u793acase\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3aswitch(condition) \u5176\u4e2dcondition\u4e3a\u7528\u4e8e\u5224\u65ad\u7684\u53d8\u91cf default_stmt body \u8868\u793adefault\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3adefault  break_stmt name \u8868\u793abreak\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3abreak name continue_stmt name \u8868\u793acontinue\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3acontinue name goto_stmt name \u8868\u793agoto\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3agoto name yield_stmt name \u8868\u793ayield\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3ayield  name throw_stmt name \u8868\u793a\u629b\u5f02\u5e38\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3athrow target try_stmt bodycatch_bodyelse_bodyfinal_body \u8868\u793atry\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3atry body catch_body else_body final_body\u5176\u4e2d body\u4ee3\u8868try\u5185\u90e8\u7684\u6307\u4ee4\u5217\u8868catch_body\u4e3acatch\u5173\u952e\u5b57\u4e0b\u9762\u7684\u6307\u4ee4\u5217\u8868\uff0c\u5176\u5185\u90e8\u53ef\u5305\u542b\u591a\u4e2acatch_stmt\uff0celse_body\u4e3aelse\u5173\u952e\u5b57\u4e0b\u9762\u7684\u6307\u4ee4\u5217\u8868final\u4e3afinal\u5173\u952e\u5b57\u4e0b\u9762\u7684\u6307\u4ee4\u5217\u8868 catch_stmt exceptionbody \u8868\u793acatch\u6307\u4ee4\uff0cbody\u4e3a\u5176\u5185\u90e8\u6307\u4ee4\u5217\u8868 label_stmt name \u8868\u793alabel\u6307\u4ee4 asm_stmt targetdata_typeattrsdataextraargs target = attrs data(asm content), extra(input/out), args assert_stmt condition \u8868\u793aassert\u6307\u4ee4\uff0c\u5176\u683c\u5f0f\u4e3aassert condition del_stmt receivername \u8868\u793a\u5220\u9664\u6307\u4ee4\uff0c\u4f8b\u5982python\u4e2d del target unset_stmt receivername \u8868\u793a\u91cd\u7f6e\u6307\u4ee4\uff0cphp pass_stmt \u8868\u793a\u7a7a\u6307\u4ee4 global_stmt name \u8868\u793a\u5168\u5c40\u5e94\u7528\u6307\u4ee4\uff0c\u4f8b\u5982python\u4e2dglabol target nonlocal_stmt name \u8868\u793a\u53d8\u91cf\u5f15\u7528\u6307\u4ee4\uff0c\u4f8b\u5982python\u4e2dnonlocal target type_cast_stmt targetdata_typesourceerrorcast_action \u8868\u793a\u7c7b\u578b\u8f6c\u6362\uff0c\u683c\u5f0f\u4e3atarget = (data_type) source\u5982\u679c\u6709\u9519\u8bef\uff0c\u4ea7\u751ferror type_alias_decl data_typename type_parameters Typedef: <code>typedef int a</code> \u2192 <code>name: a</code>, <code>data_type: int</code> with_stmt attrswith_init \u8868\u793awith\u6307\u4ee4\uff0c\u540e\u9762\u63a5\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5176\u4e2dattrs\u4e00\u822c\u4e3aasync\uff0cwith_init\u4e3a\u5bf9\u4e8e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0cbody\u4e3a\u5185\u90e8\u6307\u4ee4\u5217\u8868\uff1b\u5bf9\u4e8e\u4e00\u6761with\u8bed\u53e5\uff1aasync with aiofiles.open(filepath, 'r') as file:    \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003content = await file.read()\u5b83\u7684\u4e2d\u95f4\u8868\u793a\u4e3a\uff1a{'with_stmt': {'attrs': ['async'],       'with_init': [{'field_read': {'target': '%v0',                                              'receiver_object': 'aiofiles',                                              'field': 'open'}},                              {'call_stmt': {'target': '%v1',                                            'name': '%v0',                                             'args': ['filepath', \"\"'r'\"\"]}},                              {'assign_stmt': {'target': 'file',                                               'operand': '%v1'}}],                'body': [{'field_read': {'target': '%v0',                                        'receiver_object': 'file',                                         'field': 'read'}},                         {'call_stmt': {'target': '%v1',                                        'name': '%v0',                                        'args': []}},                         {'await': {'target': '%v1'}},                         {'variable_decl': {'data_type': None,                                            'name': 'content'}},                         {'assign_stmt': {'target': 'content',                                          'operand': None}}]}} unsafe_block body \u8868\u793arust\u4e2d\u7684unsafe\u5757\u5176\u4e2dbody\u662f\u4e00\u4e2a\u6307\u4ee4\u5217\u8868 block body \u8868\u793a\u666e\u901a\u5757\u5176\u4e2dbody\u662f\u4e00\u4e2a\u6307\u4ee4\u5217\u8868 block_start stmt_idparent_stmt_id \u5185\u90e8\u6307\u4ee4\uff0c\u8868\u793abody\u7684\u5f00\u59cb\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u5b9a\u4e49 block_end stmt_idparent_stmt_id \u5185\u90e8\u6307\u4ee4\uff0c\u8868\u793abody\u7684\u7ed3\u675f\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u5b9a\u4e49 new_array targetattrsdata_type \u8868\u793a\u4e00\u4e2a\u65b0\u6570\u7ec4\u7684\u5b9e\u4f8b\u5316\u683c\u5f0f\u4e3atarget = attrs data_type[] new_object targetattrsdata_typeargs \u5b9e\u4f8b\u5316\u4e00\u4e2a\u7c7b\uff1atarget = attrs new datatype(args) new_record targetattrsdata_type \u8868\u793a\u4e00\u4e2a\u65b0\u5b57\u5178\u7684\u5b9e\u4f8b\u5316 new_set targetattrsdata_type \u8868\u793a\u4e00\u4e2a\u65b0\u96c6\u5408\u7684\u5b9e\u4f8b\u5316 new_struct targetattrsdata_type phi_stmt targetphi_valuesphi_labels target = [phi_value, phi_label] \u3010\u6ce8\u3011\u6765\u81eallvm\uff0c\u6839\u636e\u8def\u5f84\u9009\u62e9value mem_read targetaddress \u7528\u4e8e\u4ece\u5185\u5b58address\u4e2d\u8bfb\u53d6\u5185\u5bb9\uff0c\u5176\u683c\u5f0f\u4e3atarget = *address mem_write addresssource \u7528\u4e8e\u5f80\u5185\u5b58address\u4e2d\u5199\u5185\u5bb9\uff0c\u5176\u683c\u5f0f\u4e3a*address = source array_write arrayindexsource \u7528\u4e8e\u5199\u6570\u7ec4\u5185\u5bb9\uff0c\u683c\u5f0f\u4e3a array[index] = source array_read targetarrayindex \u8bfb\u53d6\u6570\u7ec4\u6307\u5b9a\u7684\u5143\u7d20\u4f8b\u5982a0 = result[0] array_insert arraysourceindex \u7528\u4e8e\u5411\u6570\u7ec4\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 array_append arraysource \u7528\u4e8e\u5199\u6570\u7ec4\u5185\u5bb9\uff0c\u683c\u5f0f\u4e3a .append() array_extend arraysource \u7528\u4e8e\u5199\u6570\u7ec4\u5185\u5bb9\uff0c\u683c\u5f0f\u4e3a .extend() record_write receiver_objectkeyvalue \u7528\u4e8e\u5199map\u4e2d\u5185\u5bb9record[key] = value record_extend recordsource \u7528\u4e8e\u5199map\u4e2d\u5185\u5bb9.update() field_write receiver_objectfieldsource \u7528\u4e8e\u5199receiver_object\u4e2d\u6210\u5458\u53d8\u91cf\uff0c\u683c\u5f0f\u4e3areceiver_object.field = source field_read targetreceiver_objectfield \u7528\u4e8e\u8bfbreceiver_object\u4e2d\u6210\u5458\u53d8\u91cf\uff0c\u683c\u5f0f\u4e3atarget = receiver_object.field slice_wirte arraysourcestartendstep \u5bf9\u5e94\u4e8epython\u4e2d\u7684slice\u6307\u4ee4\u683c\u5f0f\u4e3a array[start: end: step] = sourcestart: \u5207\u7247\u5f00\u59cb\u7684\u7d22\u5f15\u3002stop: \u5207\u7247\u7ed3\u675f\u7684\u7d22\u5f15\u3002step: \u6bcf\u6b21\u8df3\u8fc7\u7684\u5143\u7d20\u6570\u3002 slice_read targetarraystartendstep \u5bf9\u5e94\u4e8epython\u4e2d\u7684slice\u6307\u4ee4\u683c\u5f0f\u4e3a target = array[start: end: step]start: \u5207\u7247\u5f00\u59cb\u7684\u7d22\u5f15\u3002stop: \u5207\u7247\u7ed3\u675f\u7684\u7d22\u5f15\u3002step: \u6bcf\u6b21\u8df3\u8fc7\u7684\u5143\u7d20\u6570\u3002\u4ee5python\u4e3a\u4f8b\uff1aa = list[x:y:3]\u5bf9\u5e94\u7684\u4e2d\u95f4\u8868\u793a\u4e3a\uff1a{'slice_read': {'target': '%v1', 'array': 'list', 'start': 'x', 'end': 'y', 'step': '3'}} {'assign_stmt': {'target': 'a', 'operand': '%v1'}} addr_of targetsource \u7528\u4e8e\u53d6\u5730\u5740\uff0c\u5176\u683c\u5f0f\u4e3atarget = &amp;source await_stmt target field_addr targetdata_typename \u7528\u4e8e\u67e5\u8be2field\u5728struct_decl\u4e2d\u7684\u5730\u5740\u7f16\u8bd1\u91cf\u4f8b\u5982\uff1astruct address {   \u2003\u2003char name[50];   \u2003\u2003char street[50];   \u2003\u2003int phone;};offsetof(struct address, name); \u8f6c\u6362\u4e3atarget = data_type: address, name: name \u3010\u6ce8\u3011offsetof() switch_type_stmt conditionbody \u8868\u793aswitch\u6307\u4ee4\uff0c\u683c\u5f0f\u4e3aswitch(condition) \u5176\u4e2dcondition\u4e3a\u7528\u4e8e\u5224\u65ad\u7684\u53d8\u91cf"},{"location":"zh/global_analysis/","title":"\u5168\u5c40\u5206\u6790","text":"<p>\u2003\u5728\u57fa\u4e8e\u51fd\u6570\u6458\u8981\u7684\u81ea\u5e95\u5411\u4e0a\u5206\u6790\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u4ee5\u5355\u4e2a\u51fd\u6570\u4e3a\u5206\u6790\u8fb9\u754c\u4e14\u672a\u8003\u8651\u7a0b\u5e8f\u6267\u884c\u7684\u987a\u5e8f\uff0c\u5bfc\u81f4\u65e0\u6cd5\u89e3\u6790\u6765\u81ea\u51fd\u6570\u5916\u90e8\u7684\u53d8\u91cf\u72b6\u6001(\u6bd4\u5982\u5916\u90e8\u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570)\uff0c\u6211\u4eec\u5c06\u5176\u62bd\u8c61\u4e3a\"anything\"\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5bf9\u4e00\u4e9b\u5173\u952e\u7684anything\u8fdb\u884c\u4e86\u6807\u8bb0\uff0c\u5728\u5168\u5c40\u5206\u6790\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u7684\u76ee\u6807\u4fbf\u662f\u89e3\u6790\u8fd9\u4e9b\u5173\u952eanything\u7684\u72b6\u6001\u3002 \u2003\u5168\u5c40\u5206\u6790\u9636\u6bb5\u4f1a\u4ece\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u5f00\u59cb\uff0c\u6309\u7167\u7a0b\u5e8f\u6267\u884c\u7684\u8c03\u7528\u987a\u5e8f\u91cd\u65b0\u5bf9\u6bcf\u4e2a\u8c03\u7528\u94fe\u4e0a\u7684\u51fd\u6570\u8fdb\u884c\u5206\u6790\u3002\u6b64\u9636\u6bb5\u57fa\u672c\u590d\u7528\u81ea\u5e95\u5411\u4e0a\u5206\u6790\u9636\u6bb5\u7684\u4ee3\u7801\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u5206\u6790\u6240\u6709\u8bed\u53e5\uff0c\u800c\u662f\u53ea\u5206\u6790\u90a3\u4e9b\u5305\u542b\u5173\u952eanything\u72b6\u6001\u7684\u8bed\u53e5(\u6bd4\u5982\"call anything()\")\u3002\u81ea\u5e95\u5411\u4e0a\u9636\u6bb5\u751f\u6210\u7684\u51fd\u6570\u6458\u8981\u540c\u6837\u80fd\u591f\u590d\u7528\u3002\u6bcf\u5206\u6790\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u67e5\u770b\u5176\u51fd\u6570\u6458\u8981\u4e2d\u662f\u5426\u5b58\u5728\u6807\u8bb0\u7684\u5173\u952eState\u3002\u82e5\u65e0\uff0c\u76f4\u63a5\u7ed3\u675f\u8be5\u65b9\u6cd5\u7684\u5206\u6790\uff1b\u82e5\u6709\uff0c\u5219\u53ea\u91cd\u65b0\u5206\u6790\u5173\u952eState\u6240\u5728\u7684\u8bed\u53e5\u3002\u82e5\u91cd\u65b0\u5206\u6790\u540e\uff0c\u8be5\u8bed\u53e5\u7684\u8f93\u51faState\u53d1\u751f\u53d8\u5316\uff0c\u5219\u4e5f\u4f1a\u5206\u6790\u540e\u7eed\u53d7\u6b64\u53d8\u5316\u5f71\u54cd\u7684\u8bed\u53e5\u3002 \u2003\u5728\u5168\u5c40\u5206\u6790\u9636\u6bb5\uff0c\u6211\u4eec\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u8c03\u7528\u6808\uff0c\u6309\u7167\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u7684\u8c03\u7528\u987a\u5e8f\u5c06\u51fd\u6570\u4f9d\u6b21\u5165\u6808\u3002\u5f53\u5206\u6790\u67d0\u4e2a\u5173\u952eanything\u72b6\u6001\u65f6\uff0c\u6211\u4eec\u4f1a\u6cbf\u7740\u8c03\u7528\u6808\u5411\u4e0a\u9010\u5c42\u641c\u5bfb\uff0c\u76f4\u5230\u80fd\u591f\u5c06\u8be5anything\u548c\u5177\u4f53\u7684State\u5173\u8054\u4e0a\u4e3a\u6b62\u3002 \u2003\u5728\u6b64\u9636\u6bb5\u6211\u4eec\u8fd8\u4f1a\u7ef4\u62a4\u4e00\u4e2acall-path\uff0c\u7528\u4e8e\u8bb0\u5f55\u6bcf\u6761\u8c03\u7528\u8def\u5f84\u3002\u76f8\u6bd4\u4e8e\u8c03\u7528\u56fe\uff0ccall-path\u4e0d\u4f1a\u6dfb\u52a0\u4e0d\u5b58\u5728\u7684\u8c03\u7528\u5173\u7cfb\uff0c\u56e0\u6b64\u66f4\u52a0\u7cbe\u786e\u3002</p>"},{"location":"zh/lang_parser/","title":"\u8bed\u8a00\u524d\u7aef","text":"<p>\u200b   \u8bed\u8a00\u89e3\u6790\u524d\u7aef\u5c06\u8f93\u5165\u7684\u4ee3\u7801\u8f6c\u6362\u4e3a\u7edf\u4e00\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u901a\u8fc7\u5728\u4e2d\u95f4\u8868\u793a\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u540e\u7eed\u5206\u6790\uff0c\u4ece\u800c\u5b9e\u73b0\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u8bed\u4e49\u5206\u6790\u5f15\u64ce\u3002\u7136\u800c\uff0c\u76ee\u524d\u7684\u8bb8\u591a\u4e2d\u95f4\u8868\u793a\u5982LLVM IR\u3001Graal Truffle\u7b49\u683c\u5f0f\u590d\u6742\uff0c\u5e76\u4e14\u5f88\u591a\u5de5\u5177\u524d\u7aef\u4e0d\u4ec5\u9700\u8981\u5904\u7406\u683c\u5f0f\u8f6c\u6362\uff0c\u8fd8\u9700\u8981\u63d0\u4f9b\u7c7b\u578b\u5206\u6790\u3001\u63a7\u5236\u6d41\u3001SSA\u7b49\u5206\u6790\uff0c\u8fd9\u4e9b\u5bfc\u81f4\u8bed\u8a00\u524d\u7aef\u4efb\u52a1\u7e41\u91cd\uff0c\u5bf9\u6e90\u4ee3\u7801\u8f6c\u6362\u96be\u5ea6\u5927\uff0c\u6210\u672c\u9ad8\u3002</p> <p>\u200b   \u57fa\u4e8e\u8fd9\u79cd\u73b0\u72b6\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u8f7b\u91cf\u7ea7\u7684\u8bed\u8a00\u524d\u7aef\uff0c\u5c06\u6d89\u53ca\u8bed\u4e49\u76f8\u5173\u903b\u8f91\u5168\u90e8\u5378\u8f7d\u5230\u8bed\u4e49\u5206\u6790\u5f15\u64ce\uff0c\u524d\u7aef\u53ea\u9700\u8981\u8d1f\u8d23\u5fe0\u5b9e\u7ffb\u8bd1\u8f93\u5165\u4ee3\u7801\u5230\u4e2d\u95f4\u8bed\u8a00\u5373\u53ef\uff0c\u4e0d\u8d1f\u8d23\u5176\u4ed6\u8bed\u4e49\u76f8\u5173\u5de5\u4f5c\u3002\u57fa\u4e8e\u8fd9\u4e00\u7406\u5ff5\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e0d\u4f9d\u8d56\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684\u7b80\u5355\u901a\u7528\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5373GIR\uff08General IR\uff09\u3002GIR\u5265\u79bb\u4e86\u7c7b\u578b\u7cfb\u7edf\u7684\u5197\u4f59\u7ec6\u8282\uff0c\u805a\u7126\u4e8e\u4ee3\u7801\u884c\u4e3a\u5efa\u6a21\u4e0e\u53d8\u91cf\u903b\u8f91\u5173\u7cfb\u7684\u8868\u8fbe\uff0c\u4ece\u800c\u6709\u5229\u4e8e\u5728\u66f4\u9ad8\u62bd\u8c61\u5c42\u6b21\u652f\u6301\u7a0b\u5e8f\u884c\u4e3a\u3002</p> <p>\u200b\u76ee\u524dGIR\u4ec5\u5305\u542b 78 \u6761\u57fa\u7840\u6307\u4ee4\uff0c\u5177\u4f53\u53ef\u53c2\u89c1GIR \u8bf4\u660e\u6587\u6863\u3002\u8fd9\u4e9b\u6307\u4ee4\u547d\u540d\u9075\u5faa\u76f4\u89c2\u7684\u8bed\u4e49\u6620\u5c04\u89c4\u5219\uff0c\u4f8b\u5982 class_decl\uff08\u7c7b\u58f0\u660e\uff09\u3001call_stmt\uff08\u51fd\u6570\u8c03\u7528\uff09\u3001assign_stmt\uff08\u8d4b\u503c\u8bed\u53e5\uff09\u7b49\u5747\u5177\u5907\u81ea\u89e3\u91ca\u6027\u3002</p> <p>\u524d\u7aef\u5b9e\u73b0\u903b\u8f91\u4e3b\u8981\u4e3a\u91c7\u7528\u81ea\u4e0a\u800c\u4e0b\u9012\u5f52\u7684\u65b9\u5f0f\uff1a\u9996\u5148\u901a\u8fc7tree sitter\u5c06\u8f93\u5165\u4ee3\u7801\u8f6c\u6362\u4e3aAST\uff0c\u7136\u540elang_parser.py\u8c03\u7528\u5177\u4f53\u8bed\u8a00\u7684Parser\u8f6c\u6362\u4e3aGIR\u3002</p>"},{"location":"zh/loader/","title":"Loader","text":""},{"location":"zh/loader/#loader","title":"\u5185\u5b58\u548c\u6587\u4ef6\u7cfb\u7edf\uff08loader\uff09","text":"<p>\u2003\u4e3a\u52a0\u5f3a\u5185\u5b58\u548c\u6587\u4ef6\u7684\u7ba1\u7406\uff0c\u5c24\u5176\u662f\u907f\u514d\u5185\u5b58\u4e0d\u8db3\u95ee\u9898\uff0c\u6211\u4eec\u57fa\u4e8eLRU\uff08Least Recently Used\uff09\u7b97\u6cd5\u5b9e\u73b0\u4e24\u5c42\u7684\u5185\u5b58\u7ba1\u7406\uff0c\u5373item\u5c42\u548cbundle\u5c42\uff0c\u5e76\u5728bundle\u5c42\u5b9e\u73b0\u4e86\u548c\u672c\u5730\u786c\u76d8\u7684\u4ea4\u4e92\uff0c\u5373\u6587\u4ef6\u7ba1\u7406\u3002</p>"},{"location":"zh/plugin/","title":"Plugin","text":""},{"location":"zh/plugin/#event_manager","title":"\u63d2\u4ef6\u7cfb\u7edf\uff08event_manager\uff09","text":"<p>\u2003\u4e0d\u540c\u8bed\u8a00\u7684\u72ec\u7279\u7684\u7279\u6027\u9700\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u5904\u7406\uff0c\u4f8b\u5982javascript\u8bed\u8a00\u7684\u539f\u578b\u94fe\uff0c\u4e3a\u4e86\u4f7f\u5206\u6790\u5de5\u5177\u5177\u5907\u53ef\u6269\u5c55\u6027\uff0c\u672c\u5de5\u5177\u52a0\u5165\u63d2\u4ef6\u7cfb\u7edf\u3002\u5f53\u5f00\u53d1\u8005\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u63d2\u4ef6\u65f6\uff0c\u9996\u5148\u5728app_register.py\u4e0eevent_manager.py\u4e2d\u6ce8\u518c\u63d2\u4ef6\uff0c\u5e76\u51c6\u5907\u597d\u63d2\u4ef6\u7684\u5904\u7406\u4ee3\u7801\uff0c\u7136\u540e\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u51c6\u5907\u597d\u63d2\u4ef6\u7684\u8f93\u5165\u5e76\u901a\u8fc7EventManager.notify()\u89e6\u53d1\u63d2\u4ef6\uff0c\u5f53\u63d2\u4ef6\u88ab\u89e6\u53d1\u540e\uff0c\u8fd4\u56de\u63d2\u4ef6\u7684\u8f93\u51fa\u7ed3\u679c\u4ee5\u53ca\u63d2\u4ef6\u7684\u5904\u7406\u60c5\u51b5\u3002 \u2003\u4ee5\u5904\u7406javascript\u7684\u539f\u578b\u94fe\u7684\u63d2\u4ef6\u4e3a\u4f8b\uff0c\u5f00\u53d1\u4eba\u5458\u6ce8\u518c\u5b8c\u5e76\u51c6\u5907\u597d\u63d2\u4ef6\u7684\u5904\u7406\u4ee3\u7801\u540e\uff0c\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u89e6\u53d1\u63d2\u4ef6:</p> <pre><code>...\nevent = EventData(\n            #\u8be5\u63d2\u4ef6\u751f\u6548\u7684\u8bed\u8a00\n            self.lang,\n            #\u63d2\u4ef6\u8c03\u7528\u7684\u9636\u6bb5\n            EventKind.P2STATE_NEW_OBJECT_BEFORE,\n            {\n            #\u63d2\u4ef6\u7684\u8f93\u5165\u6570\u636e\n                \"stmt_id\": stmt_id,\n                ...\n            }\n        )\n#\u89e6\u53d1\u63d2\u4ef6,\u5e76\u8fd4\u56de\u63d2\u4ef6\u7684\u8f93\u51fa\u7ed3\u679c\u4ee5\u53ca\u63d2\u4ef6\u7684\u5904\u7406\u60c5\u51b5\napp_return = self.event_manager.notify(event)\n#\u6839\u636e\u63d2\u4ef6\u7684\u5904\u7406\u60c5\u51b5\u51b3\u5b9a\u540e\u7eed\u7684\u5206\u6790\nif event_return.is_event_unprocessed(app_return):\n    ...\n</code></pre>"},{"location":"zh/setup/","title":"\u5b89\u88c5\u5e76\u8fd0\u884c","text":"<p>1\u3001\u5f53\u524d\u73af\u5883\u8981\u6c42\uff1aLinux  +  Python3\uff1b</p> <p>2\u3001\u4e0b\u8f7dLIAN\u4ed3\u5e93\uff1a</p> <pre><code>git clone https://gitee.com/fdu-ssr/lian.git\n</code></pre> <p>3\u3001\u5b89\u88c5python\u4f9d\u8d56\u5e93\uff1a</p> <pre><code>cd lian                  \npip install -r requirements.txt     \n</code></pre> <p>4\u3001lian\u7684\u57fa\u7840\u4f7f\u7528\uff1a</p> <pre><code>./scripts/lian.sh -l &lt;\u8bed\u8a00&gt; &lt;\u5f85\u5206\u6790\u4ee3\u7801\u6587\u4ef6\u8def\u5f84&gt;\n</code></pre> <p>\u6ce8\uff1a1\u3001\u5f85\u5206\u6790\u4ee3\u7801\u6587\u4ef6\u8def\u5f84\u53ef\u4ee5\u662f\u7edd\u5bf9\u8def\u5f84\u6216\u8005\u662f\u76f8\u5bf9\u8def\u5f84</p> <p>\u200b    2\u3001\u5bf9\u4e8e <code>.\\lian.sh</code> \u547d\u4ee4\u884c\u53c2\u6570\u7684\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003\u547d\u4ee4\u884c\u53c2\u6570\u914d\u7f6e</p>"},{"location":"zh/summary_generation/","title":"\u57fa\u4e8e\u51fd\u6570\u6458\u8981\u5206\u6790","text":"<p>\u2003\u4f20\u7edf\u7684\u9759\u6001\u5206\u6790\u5de5\u4f5c\u65e0\u6cd5\u6ee1\u8db3\u8f6f\u4ef6\u5b89\u5168\u5206\u6790\u7684\u7cbe\u5ea6\u9700\u6c42\u3002\u4e3a\u4e86\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u7684\u8bed\u4e49\u5206\u6790\uff0c\u6211\u4eec\u57fa\u4e8e\u62bd\u8c61\u89e3\u91ca\u5c06\u7a0b\u5e8f\u8fd0\u884c\u5206\u4e3a\u4e24\u4e2a\u5c42\u6b21\uff1a1\uff09Symbol\u7b26\u53f7\u5c42\uff0c\u5373\u53d8\u91cf\u7b49\u6807\u8bc6\u7b26\uff1b2\uff09\u8fd0\u884c\u65f6\u72b6\u6001\u5c42State\uff0c\u5c06Symbol\u5728\u771f\u5b9e\u8fd0\u884c\u65f6\u53ef\u80fd\u7684\u5185\u5bb9\u62bd\u8c61\u5efa\u6a21\u6210\u4e00\u4e2a\u6240\u8c13\u7684\"\u72b6\u6001(State)\"\uff0c\u5e76\u4e14\u5c06Symbol\u4e0e\u5bf9\u5e94\u7684States\u8fdb\u884c\u5173\u8054\u3002\u8bed\u4e49\u5206\u6790\u65f6\uff0c\u6211\u4eec\u6a21\u62df\u7a0b\u5e8f\u52a8\u6001\u8fd0\u884c\u7684\u8fc7\u7a0b\uff0c\u8ddf\u8e2a\u548c\u8ba1\u7b97States\u7684\u53d8\u5316\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9\u72b6\u6001\u7684\u9ad8\u7cbe\u5ea6\u5206\u6790\u3002 \u2003\u81ea\u5e95\u5411\u4e0a\u5206\u6790\u5927\u81f4\u53ef\u5206\u4e3a\u4e09\u4e2a\u6846\u67b6\uff1a</p>"},{"location":"zh/summary_generation/#1gir","title":"1.GIR\u6307\u4ee4\u5206\u6790","text":"<p>\u2003GIR\u6307\u4ee4\u5206\u6790\u4e2d\uff0c\u6211\u4eec\u6309\u63a7\u5236\u6d41\u987a\u5e8f\u9010\u6761\u53d6\u5f53\u524d\u65b9\u6cd5\u4e2d\u7684GIR\u6307\u4ee4\u8fdb\u884c\u72b6\u6001(State)\u7ea7\u522b\u7684\u8bed\u4e49\u5206\u6790\u3002\u5bf9\u4e8e\u4e00\u6761GIR\u6307\u4ee4\uff0c\u5176operation\u5b57\u6bb5\u53cd\u6620\u4e86\u5176\u6240\u5c5e\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u4f9d\u636e\u8be5\u5b57\u6bb5\uff0cGIR\u6307\u4ee4\u4f1a\u88ab\u5206\u53d1\u5230\u76f8\u5e94\u7c7b\u578b\u7684\u5904\u7406\u51fd\u6570\u4e2d\u3002\u6bd4\u5982\uff0c\u82e5operation\u4e3a\"assign_stmt\"\uff0c\u5219\u4f1a\u5206\u53d1\u5230assign_stmt_state\u51fd\u6570\u3002\u5728\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u6839\u636e\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u4ee4\uff0c\u8fdb\u884cStates\u7684\u8ba1\u7b97\u548c\u4f20\u64ad\u3002</p>"},{"location":"zh/summary_generation/#2","title":"2.\u8fc7\u7a0b\u5185\u5206\u6790","text":"<p>\u2003\u5728\u8fc7\u7a0b\u5185\u5206\u6790\u4e2d\uff0c\u6211\u4eec\u5bf9\u4e00\u4e2a\u51fd\u6570\u7684\u6bcf\u6761\u8bed\u53e5\u8fdb\u884cGIR\u6307\u4ee4\u5206\u6790\u3002\u4e3a\u4e86\u907f\u514d\u5206\u6790\u5927\u578b\u7a0b\u5e8f\u65f6\u7684\u72b6\u6001\u7206\u70b8\u95ee\u9898\uff0c\u5e76\u4e14\u51cf\u5c11\u5bf9\u540c\u4e00\u51fd\u6570\u7684\u91cd\u590d\u5206\u6790\uff0c\u6211\u4eec\u4ee5\u5355\u4e2a\u51fd\u6570\u4e3a\u4e00\u4e2a\u5206\u6790\u5355\u5143\u3002\u6bcf\u5206\u6790\u5b8c\u4e00\u4e2a\u51fd\u6570\uff0c\u4fbf\u4e3a\u5176\u751f\u6210\u4e00\u4e2a\u72b6\u6001\u7ea7\u522b\u7684\u51fd\u6570\u6458\u8981\u3002\u51fd\u6570\u6458\u8981\u4e00\u7ecf\u751f\u6210\u4e0d\u4f1a\u6539\u53d8\u3002 \u51fd\u6570\u6458\u8981\u4fdd\u5b58\u4e86\u8be5\u51fd\u6570\u5173\u952e\u53d8\u91cf\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u662f\u4e00\u4e2a{Symbol-&gt;States}\u7684\u6620\u5c04\u3002\u5173\u952e\u53d8\u91cf\u5305\u62ec\uff1a\u51fd\u6570\u53c2\u6570\u3001\u5916\u90e8\u53d8\u91cf\u3001this\u53d8\u91cf\u548creturn\u53d8\u91cf\u3002\u51fd\u6570\u6458\u8981\u8bb0\u5f55\u5173\u952e\u53d8\u91cf\u4ece\u8d77\u59cb\u72b6\u6001\u5f00\u59cb\uff0c\u7ecf\u8fc7\u8be5\u51fd\u6570\u72b6\u6001\u8ba1\u7b97\u540e\u7684\u6700\u7ec8\u53d8\u5316(\u6bd4\u5982\uff0c\u5bf9\u53c2\u6570\u6dfb\u52a0\u4e86field)\u3002</p>"},{"location":"zh/summary_generation/#3","title":"3.\u8fc7\u7a0b\u95f4\u5206\u6790","text":"<p>\u2003\u8fc7\u7a0b\u95f4\u5206\u6790\u5efa\u7acb\u5728\u8fc7\u7a0b\u5185\u5206\u6790\u7684\u57fa\u7840\u4e0a\u3002\u5f53\u9047\u5230\u4e00\u6761\u5f62\u5982caller call callee\u7684call_stmt\u65f6\u3002\u6211\u4eec\u9996\u5148\u5224\u65ad\u8be5callee\u662f\u5426\u5df2\u88ab\u5206\u6790\u8fc7\u3002\u82e5\u5df2\u88ab\u5206\u6790\uff0c\u6211\u4eec\u53ea\u9700\u5c06callee\u51fd\u6570\u7684\u51fd\u6570\u6458\u8981\u5e94\u7528\u81f3caller\u7684\u5bf9\u5e94\u72b6\u6001\u4e0a\uff0c\u5373\u53ef\u5b8c\u6574\u5730\u4fdd\u7559\u6b64\u6b21\u8c03\u7528\u751f\u6210\u7684\u72b6\u6001\u8bed\u4e49\uff1b\u82e5\u5c1a\u672a\u88ab\u5206\u6790\uff0c\u6211\u4eec\u7acb\u5373\u4e2d\u65ad\u5bf9\u5f53\u524d\u51fd\u6570\u7684\u5206\u6790\uff0c\u8f6c\u800c\u5148\u53bb\u5206\u6790callee\u51fd\u6570\u3002\u5f53caller\u4f9d\u8d56\u7684\u6240\u6709callee\u90fd\u88ab\u5206\u6790\u5b8c\uff0c\u751f\u6210\u51fd\u6570\u6458\u8981\u540e\uff0c\u6211\u4eec\u4f1a\u6062\u590d\u521a\u624d\u88ab\u4e2d\u65ad\u7684caller\u7684\u5206\u6790\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u65e2\u80fd\u907f\u514d\u72b6\u6001\u7206\u70b8\uff0c\u53c8\u80fd\u51cf\u5c11\u91cd\u590d\u7684\u5206\u6790\u3002 \u2003\u5e94\u7528\u51fd\u6570\u6458\u8981\u65f6\uff0c \u6211\u4eec\u5148\u4eceSymbol\u5c42\u9762\u5c06caller\u548ccallee\u5173\u8054\u4e0a(\u6bd4\u5982\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u5173\u8054\u3001\u5916\u90e8\u53d8\u91cf\u7684\u5173\u8054)\u3002\u968f\u540e\uff0c\u57fa\u4e8e\u6bcf\u5bf9\u5173\u8054\u7684Symbol\uff0c\u5206\u522b\u53d6\u51fa\u5bf9\u5e94\u7684caller\u4e2d\u7684States\u548ccallee\u51fd\u6570\u6458\u8981\u4e2d\u7684States'\uff0c\u5c06States'\u7684\u72b6\u6001\u5e94\u7528\u5230States\uff0c\u6700\u5927\u7a0b\u5ea6\u786e\u4fdd\u5c06callee\u4e2d\u7684States\u8bed\u4e49\u6620\u5c04\u5230caller\u4e2d\u3002</p> <p>\u2003\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u81ea\u5e95\u5411\u4e0a\u7684\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u5355\u4e2a\u51fd\u6570\u5373\u4e3a\u5206\u6790\u8fb9\u754c\uff0c\u4e0d\u5173\u6ce8\u4f20\u5165\u51fd\u6570\u7684\u5916\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u53c2\u6570\u7684\u5177\u4f53\u72b6\u6001\u3002\u5728\u672c\u9636\u6bb5\u4e2d\uff0c\u6211\u4eec\u4f1a\u5c06\u8fd9\u4e9b\u6765\u81ea\u5916\u90e8\u7684\u72b6\u6001\u62bd\u8c61\u4e3a\"anything\"\uff0c\u610f\u4e3a\u53ef\u80fd\u53d6\u5230\u4efb\u4f55\u503c\u3002\u82e5\u5206\u6790\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53d1\u73b0\u8fd9\u4e9banything\u72b6\u6001\u6d41\u5230\u4e86\u654f\u611f\u64cd\u4f5c\uff0c\u5982call anything()\u7b49\uff0c\u6211\u4eec\u4f1a\u91cd\u70b9\u6807\u8bb0\uff0c\u8bb0\u5f55\u5728\u51fd\u6570\u6458\u8981\u4e2d\u3002\u5728\u968f\u540e\u7684\u5168\u5c40\u5206\u6790\u4e2d\uff0c\u6211\u4eec\u4f1a\u4ece\u5168\u5c40\u89c6\u89d2\u89e3\u6790\u51fa\u8fd9\u4e9b\u5173\u952eanything\u7684\u5177\u4f53\u72b6\u6001\u3002</p>"}]}